package br.adp.geral;

import br.JavaApplicationJsys;
import br.adp.tabelas.Scripts;
import br.adp.util.ExecutaQuery;
import br.adp.util.FileEx;
import br.adp.util.IniFiles;
import br.adp.util.Progress;
import br.adp.util.TextFile;
import br.sql.log.Log;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Juliano Alves Medina
 */
public class Geral extends javax.swing.JFrame {

    private final File[] scriptsCreate = {
        new File("Scripts/function"),
        new File("Scripts/type"),
        new File("Scripts/view"),
        new File("Scripts/procedure"),
        new File("Scripts/trigger")};
    private final File[] scriptsDelete = {
        new File("Scripts/procedure"),
        new File("Scripts/view"),
        new File("Scripts/trigger"),
        new File("Scripts/function"),
        new File("Scripts/type")};
    public String bases[];
    private String arquivoImportador;
    private final List<Importador> imp;
    private final ImportadorTableModel importadorTableModel;
    private Integer countErros = 0;
    private Integer countScripts = 0;

    /**
     * Creates new form Geral
     */
    public Geral() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Log.registraErro(JavaApplicationJsys.class, "main", ex);
        }
        caregaBases();
        initComponents();
        DefaultCaret caret = (DefaultCaret) jTextAreaLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jTextAreaLog.setText("Clique em Atualizar ");
        imp = new ArrayList<>();
        importadorTableModel = new ImportadorTableModel(imp);
        jTable1.setModel(importadorTableModel);
        jTable1.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        jTable1.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false), "selectNextColumnCell");
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            String[] col = new String[]{
                "",
                "CONVERT(DATETIME, @value, 100)",
                "CASE WHEN @value = '?' THEN 1 ELSE 0 END",
                "SUBSTRING(@value, 0, 2)",
                "LEFT(@value, 1)",
                "LEFT('0000000000' + @value, 2)",
                "RIGHT(@value, 1)",
                "CAST(@value as VARCHAR(1))",
                "CAST(@value as DECIMAL(16,4))",
                "CAST(@value as BIT)",
                "CAST(@value as int)",
                "CAST(@value as bigint)",
                "CAST(@value as bit)",
                "COALESCE(CAST(@value as VARCHAR(1)), '')",
                "REPLACE(@value, ',', '.')",
                "ISNULL(@value, 0)",
                "CONCAT(@value, '; ', @value)",
                "(@VALUE COLLATE SQL_Latin1_General_CP1251_CS_AS)",
                "REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@value, ':', ''), ',', ''), '.', ''), '/', ''), '-', '')"
            };
            jTable1.getColumnModel().getColumn(2).setCellEditor(new br.sql.editor.JComboBoxTableCellEditor(col));
        }
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        this.setFocusable(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bancoDadosJC = new javax.swing.JComboBox(bases);
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanelAdaptarTabelas = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabelCountErros = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabelCountScripts = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButtonAtualizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanelImportadorDados = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        tabelasCB = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        origenFileTF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adapta Jsys");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Adaptar Banco de dados");
        jLabel1.setToolTipText("");

        jLabel2.setText(JavaApplicationJsys.VERCAO_DB.toString());

        jLabel4.setText("Vers√£o DataBase:");
        jLabel4.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addComponent(jLabel4))
        );

        jLabel3.setText("Banco de Dados");
        jLabel3.setToolTipText("");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLog);

        jLabel8.setText("Contador de Erros:");

        jLabelCountErros.setText("0");

        jLabel9.setText("Contador de Scripts");

        jLabelCountScripts.setText("0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelCountErros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelCountScripts, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabelCountScripts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabelCountErros))
                .addContainerGap())
        );

        jButton1.setText("Adaptar Tabelas ");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonAtualizar.setText("Criar functions, types, views, procedures e trigger");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAtualizar)
                .addContainerGap(309, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAtualizar))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Atualiza√ß√£o", jPanel4);

        jButton4.setText("Criar Tabelas");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cadastra Cidades");
        jButton5.setToolTipText("");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setText("Cadastra IBPT (NCM)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cadastra Parametro");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Cadastra Contas");
        jButton6.setToolTipText("");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton2)
                    .addComponent(jButton6)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Instala√ß√£o", null, jPanel3, "");

        javax.swing.GroupLayout jPanelAdaptarTabelasLayout = new javax.swing.GroupLayout(jPanelAdaptarTabelas);
        jPanelAdaptarTabelas.setLayout(jPanelAdaptarTabelasLayout);
        jPanelAdaptarTabelasLayout.setHorizontalGroup(
            jPanelAdaptarTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAdaptarTabelasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAdaptarTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelAdaptarTabelasLayout.setVerticalGroup(
            jPanelAdaptarTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAdaptarTabelasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("adaptar tabelas", jPanelAdaptarTabelas);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton7.setText("Incluir");
        jButton7.setToolTipText("");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Delete");
        jButton8.setToolTipText("");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton10.setText("Salvar");
        jButton10.setToolTipText("");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        tabelasCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabelasCBActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XML", "TXT" }));

        jLabel5.setText("Origen");

        jLabel6.setText("Destino");

        jLabel7.setText("Caminho");
        jLabel7.setToolTipText("");

        jButton11.setText("...");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton9.setText("Abrir");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton12.setText("Conectar");
        jButton12.setToolTipText("");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Importar Dados");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Novo");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelImportadorDadosLayout = new javax.swing.GroupLayout(jPanelImportadorDados);
        jPanelImportadorDados.setLayout(jPanelImportadorDadosLayout);
        jPanelImportadorDadosLayout.setHorizontalGroup(
            jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImportadorDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelImportadorDadosLayout.createSequentialGroup()
                        .addGroup(jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelImportadorDadosLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(origenFileTF, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9))
                            .addGroup(jPanelImportadorDadosLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tabelasCB, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton12)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                    .addGroup(jPanelImportadorDadosLayout.createSequentialGroup()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton13)))
                .addContainerGap())
        );
        jPanelImportadorDadosLayout.setVerticalGroup(
            jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelImportadorDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(origenFileTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jButton11)
                    .addComponent(jButton14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tabelasCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jButton12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelImportadorDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton7)
                    .addComponent(jButton13))
                .addContainerGap())
        );

        jTabbedPane2.addTab("importar dados", jPanelImportadorDados);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bancoDadosJC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jTabbedPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bancoDadosJC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("Geral");
        jTabbedPane2.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed
        final Progress p = new Progress();
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextAreaLog.setText("");
                drop();
                create();
                setLog("Finalizado a cria√ß√£o de functions, types, views, procedures e trigger", "");
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
                p.finalize();
            }
        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final Progress p = new Progress();
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextAreaLog.setText("");
                atualizarTabelas();
                setLog("Finalizado adapata√ß√£o de Tabelas", "");
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
            }
        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final Progress p = new Progress();
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextAreaLog.setText("");
                importarTabelaIBPT();
                setLog("Finalizado Cadastro de IBPT (NCM)", "");
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
            }
        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        final Progress p = new Progress();
        String base = this.bases[this.bancoDadosJC.getSelectedIndex()];
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() {
                try {
                    jTextAreaLog.setText("");
                    ExecutaQuery.executeSqlScriptList(br.adp.script.Create.create(), base, Geral.this);
                    //drop();
                    //create();
                    setLog("Finalizado Cria√ß√£o de Tabelas.", "");
                } catch (SQLException ex) {
                    setLog(ex);
                    Log.registraErro(this.getClass().getName(), "Metodo", ex);
                    return null;
                }
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
            }

        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        final Progress p = new Progress();
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextAreaLog.setText("");
                importarTabelaCidades();
                setLog("Finalizado Cadastro de Cidades", "");
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
            }
        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final Progress p = new Progress();
        String base = this.bases[this.bancoDadosJC.getSelectedIndex()];
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextAreaLog.setText("");
                ExecutaQuery.executeSqlScriptList(br.adp.script.Insert.insert(), base, Geral.this);
                setLog("Finalizado Cadastro de Paremetro", "");
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
            }

        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        final Progress p = new Progress();
        SwingWorker work = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextAreaLog.setText("");
                importarTabelaContas();
                setLog("Finalizado Cadastro de Contas", "");
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.setVisible(false);
            }

            private void importarTabelaContas() {
                TextFile contas = new TextFile("jsysContas0.001.csv");
                TextFile subContas = new TextFile("jsysSubConta0.001.csv");
                try {
                    contas.openTextFile();
                    ExecutaQuery.executeSqlScript("DELETE FROM jsysContas", bases[bancoDadosJC.getSelectedIndex()]);
                    //
                    contas.secondLine();
                    while (contas.next()) {
                        String Linha = contas.readLine();
                        String[] vDados = Linha.split("[;]");
                        StringBuilder sql = new StringBuilder();
                        sql.append("INSERT INTO jsysContas ([idConta],[descricao],[idGrupo],[dataInclusao],[usuarioInclusao],[dataAlteracao],[usuarioAlteracao]) VALUES");
                        sql.append("(").append(vDados[0])
                                .append(", ").append("'").append(vDados[1]).append("'")
                                .append(", ").append("'").append(vDados[2]).append("'")
                                .append(", ").append(verificaNull(vDados[3]))
                                .append(", ").append(verificaNull(vDados[4]))
                                .append(", ").append(verificaNull(vDados[5]))
                                .append(", ").append(verificaNull(vDados[6]))
                                .append(")");
                        try {
                            ExecutaQuery.executeSqlScript(sql, bases[bancoDadosJC.getSelectedIndex()]);
                            setLog(vDados[1], "script");
                        } catch (SQLException e) {
                            setLog(" !!! erro no Script " + sql + " " + e.getMessage(), "erro");
                        }
                    }

                    subContas.openTextFile();
                    ExecutaQuery.executeSqlScript("DELETE FROM jsysSubConta", bases[bancoDadosJC.getSelectedIndex()]);
                    subContas.secondLine();
                    while (subContas.next()) {
                        String Linha = subContas.readLine();
                        String[] vDados2 = Linha.split("[;]");
                        StringBuilder sql = new StringBuilder();
                        sql.append("INSERT INTO jsysSubConta ([idConta],[idSubConta],[idGeral],[descricao],[idGrupo],[saiBanco],[tipoConta]"
                                + ",[dataInclusao],[usuarioInclusao],[dataAlteracao],[usuarioAlteracao]) VALUES");
                        sql.append("(").append(vDados2[0])
                                .append(", ").append(vDados2[1])
                                .append(", ").append("'").append(vDados2[2]).append("'")
                                .append(", ").append("'").append(vDados2[3]).append("'")
                                .append(", ").append("'").append(vDados2[4]).append("'")
                                .append(", ").append(vDados2[5])
                                .append(", ").append(vDados2[6])
                                .append(", ").append(verificaNull(vDados2[7]))
                                .append(", ").append("'").append(vDados2[8]).append("'")
                                .append(", ").append(verificaNull(vDados2[9]))
                                .append(", ").append("'").append(vDados2[10]).append("'")
                                .append(")");
                        try {
                            ExecutaQuery.executeSqlScript(sql, bases[bancoDadosJC.getSelectedIndex()]);
                            setLog(vDados2[3], "script");
                        } catch (SQLException e) {
                            setLog(" !!! erro no Script " + sql + " " + e.getMessage(), "erro");
                        }
                    }

                } catch (IOException | SQLException e) {
                    setLog(e);
                }
            }

            private String verificaNull(String value) {
                if ("NULL".equals(value)) {
                    return value;
                } else {
                    return new StringBuilder().append("'").append(value).append("'").toString();
                }

            }
        };
        work.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setSelectedFile(new File(origenFileTF.getText()));
        file.setFileFilter(new FileNameExtensionFilter(null, jComboBox2.getSelectedItem().toString()));
        int i = file.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File arquivo = file.getSelectedFile();
            origenFileTF.setText(arquivo.getPath());
        }
        caregarArquivo();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setFileFilter(new FileNameExtensionFilter(null, "csv"));
        file.setCurrentDirectory(new File("./imports"));
        int i = file.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File arquivo = file.getSelectedFile();
            arquivoImportador = arquivo.getPath();
        }
        CaregarTabela();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Gravar();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        importadorTableModel.addRow();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        deleteRow();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            deleteRow();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        conectaTabelasJsys();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void tabelasCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabelasCBActionPerformed
        setSelectedTabelaJsys();
    }//GEN-LAST:event_tabelasCBActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {
            StringBuilder sql = new StringBuilder();
            sql.append("DECLARE @XML AS XML, @hDoc AS INT, @SQL NVARCHAR (MAX) ").append(System.lineSeparator());
            sql.append("SELECT @XML = CONVERT(XML, BulkColumn, 2) FROM OPENROWSET(BULK '");
            sql.append(origenFileTF.getText());
            sql.append("', SINGLE_BLOB) AS x ").append(System.lineSeparator());
            sql.append("EXEC sp_xml_preparedocument @hDoc OUTPUT, @XML").append(System.lineSeparator());
            sql.append("INSERT INTO [").append(tabelasCB.getSelectedItem()).append("] (");
            for (int i = 0; i < importadorTableModel.getDados().size(); i++) {
                String campo = importadorTableModel.get(i).getDestino();
                if (!"".equals(campo)) {
                    sql.append(i == 0 ? "" : ",");
                    sql.append("[").append(campo).append("]");
                    sql.append(System.lineSeparator());
                }
            }
            sql.append(") SELECT ");
            for (int i = 0; i < importadorTableModel.getDados().size(); i++) {
                if (!"".equals(importadorTableModel.get(i).getDestino())) {
                    sql.append(i == 0 ? "" : ",");
                    if (importadorTableModel.get(i).getScript() != null
                            && !"".equals(importadorTableModel.get(i).getScript())) {
                        sql.append(importadorTableModel.get(i).getScript().replaceAll("@value",
                                "[" + importadorTableModel.get(i).getOrigem() + "]"));
                    } else {
                        sql.append("[").append(importadorTableModel.get(i).getOrigem()).append("]");
                    }
                    sql.append(System.lineSeparator());
                }
            }
            sql.append("FROM OPENXML(@hDoc, 'RECORDS/RECORD/ROW') WITH (");
            for (int i = 0; i < importadorTableModel.getDados().size(); i++) {
                String campo = importadorTableModel.get(i).getOrigem();
                if (campo != null && !"".equals(campo)) {
                    sql.append(i == 0 ? "" : ",");
                    sql.append("[").append(campo).append("]");
                    sql.append(" VARCHAR(max) '@");
                    sql.append(campo);
                    sql.append("'");
                    sql.append(System.lineSeparator());
                }
            }
            sql.append(") EXEC sp_xml_removedocument @hDoc");
            ExecutaQuery.executeSqlScript(sql, bases[bancoDadosJC.getSelectedIndex()]);
            JOptionPane.showMessageDialog(this, "Finalizado", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            setLog(e);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        try {
            String nome = JOptionPane.showInputDialog("Nome do Arquivo");
            File arquivo = new File("./imports/" + nome + ".csv");
            arquivo.createNewFile();
            arquivoImportador = arquivo.getPath();
            CaregarTabela();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            setLog(e);
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox bancoDadosJC;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCountErros;
    private javax.swing.JLabel jLabelCountScripts;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelAdaptarTabelas;
    private javax.swing.JPanel jPanelImportadorDados;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    public javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextField origenFileTF;
    private javax.swing.JComboBox<String> tabelasCB;
    // End of variables declaration//GEN-END:variables

    private void create() throws HeadlessException {
        for (File pai : scriptsCreate) {
            String StingPai = pai.toString().substring(8);
            setLog("Criando " + StingPai, "script");
            for (String filho : pai.list()) {
                FileEx script = new FileEx(pai + "/" + filho);
                try {
                    if (script.stringread().length() > 0) {
                        ExecutaQuery.executeSqlScript(script.stringread(), bases[bancoDadosJC.getSelectedIndex()]);
                        setLog(" - Criado " + filho.substring(0, filho.length() - 4), "script");
                    }
                } catch (FileNotFoundException | SQLException e) {
                    setLog(" !!! erro ao tentar Criar a " + StingPai + " " + e.getMessage(), "erro");
                    setLog(e);
                }
            }
        }
    }

    private void caregaBases() {
        try {
            String fileName = "jsys.ini";
            Boolean fileexists = (new File(fileName)).exists();
            if (fileexists) {
                IniFiles ini = new IniFiles(fileName);
                bases = ini.getString("LISTA BASE", "LISTA").split(",");
            }
        } catch (Exception e) {
            setLog(e);
        }
    }

    private void drop() {
        for (File script : this.scriptsDelete) {
            String[] filhos = script.list();
            String pai = script.toString().substring(8);
            setLog("Apagando " + pai, "script");
            for (String filho : filhos) {
                filho = filho.substring(0, filho.length() - 4);
                StringBuilder sql = new StringBuilder();
                if (pai.equals("type")) {
                    sql.append("if exists (select * from sys.types where name = '").append(filho).append("')")
                            .append(System.lineSeparator())
                            .append("DROP ").append(pai).append(" ").append(filho);
                } else {
                    sql.append("if exists (select * from sysobjects where id = object_id('[").append(filho).append("]'))")
                            .append(System.lineSeparator())
                            .append("DROP ").append(pai).append(" ").append(filho);
                }
                try {
                    ExecutaQuery.executeSqlScript(sql, bases[bancoDadosJC.getSelectedIndex()]);
                    setLog(" - " + filho + " Apagando ", "script");
                } catch (SQLException e) {
                    setLog(" !!! erro ao apagar " + filho +e.getMessage(), "erro");
                }
            }
        }
    }

    /**
     * 
     * @param e 
     */
    public void setLog(SQLException e) {
        escreveLog(e.getLocalizedMessage(), "erro");
    }

    /**
     * 
     * @param e 
     */
    public void setLog(Exception e) {
        escreveLog(e.getLocalizedMessage(), "erro");
    }

    /**
     *
     * @param mensagen String com a mensagem a ser registrada no log do usuario
     * @param tipo; "erro" : "script" ou ""
     */
    public void setLog(String mensagen, String tipo) {
        escreveLog(mensagen, tipo);
    }

    /**
     *
     * @param mensagen String com a mensagem a ser registrada no log do usuario
     * @param tipo; "erro" : "script" ou ""
     */
    private void escreveLog(String mensagen, String tipo) {
        switch (tipo) {
            case "erro":
                countErros += 1;
                this.jLabelCountErros.setText(countErros.toString());
                this.jTextAreaLog.append("--------------------------------------------" + System.lineSeparator());
                this.jTextAreaLog.append("-- " + mensagen + " --" + System.lineSeparator());
                this.jTextAreaLog.append("--------------------------------------------" + System.lineSeparator());
                break;
            case "script":
                countScripts += 1;
                this.jLabelCountScripts.setText(countScripts.toString());
                this.jTextAreaLog.append(mensagen + System.lineSeparator());
                break;
            default:
                this.jTextAreaLog.append(mensagen + System.lineSeparator());
                break;
        }
    }

    private void atualizarTabelas() {
        Scripts s = new Scripts();
        s.rodar(this);
    }

    private void importarTabelaIBPT() {
        TextFile arquivo = new TextFile("TabelaIBPTaxRO16.2.A.csv");
        try {
            arquivo.openTextFile();
            ExecutaQuery.executeSqlScript("DELETE FROM NCM", bases[bancoDadosJC.getSelectedIndex()]);
            arquivo.secondLine();
            while (arquivo.next()) {
                String Linha = arquivo.readLine();
                String[] vDados = Linha.split("[;]");
                StringBuilder sql = new StringBuilder();
                sql.append("INSERT INTO NCM ([codigo] ,[ex] ,[tipo] ,[descricao] ,[nacionalfederal] ,[importadosfederal] ,[estadual] ,[municipal] ,[vigenciainicio] ,[vigenciafim] ,[chave] ,[versao] ,[fonte])  VALUES");
                sql.append("('")
                        .append(vDados[0]).append("'")
                        .append(", '").append(vDados[1]).append("'")
                        .append(", '").append(vDados[2]).append("'")
                        .append(", '").append(vDados[3]).append("'")
                        .append(", ").append(vDados[4])
                        .append(", ").append(vDados[5])
                        .append(", ").append(vDados[6])
                        .append(", ").append(vDados[7])
                        .append(", '").append(convertUsDate(vDados[8])).append("'")
                        .append(", '").append(convertUsDate(vDados[9])).append("'")
                        .append(", '").append(vDados[10]).append("'")
                        .append(", '").append(vDados[11]).append("'")
                        .append(", '").append(vDados[12]).append("'")
                        .append(")");
                try {
                    ExecutaQuery.executeSqlScript(sql, bases[bancoDadosJC.getSelectedIndex()]);
                    setLog(vDados[3], "script");
                } catch (SQLException e) {
                    setLog(" !!! erro no Script " + sql + e.getMessage(), "erro");
                }
            }
        } catch (IOException | SQLException e) {
            setLog(e);
        }
    }

    private static String convertUsDate(String date) {
        Date d = new Date();
        try {
            DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            d = formatter.parse(date);
        } catch (ParseException e) {
        }
        return convertDate(d, "yyyy-MM-dd");
    }

    private static String convertDate(Date dtConsulta, String format) {
        try {
            if (dtConsulta != null) {
                SimpleDateFormat formatter = new SimpleDateFormat(format, new Locale("pt", "BR"));
                return formatter.format(dtConsulta);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

//    private void instalacao() {
//        Instalacao ins = new Instalacao();
//        ins.rodar(this);
//    }
    private void importarTabelaCidades() {
        TextFile arquivo = new TextFile("TabelaCidades0.001.csv");
        try {
            arquivo.openTextFile();
            ExecutaQuery.executeSqlScript("DELETE FROM cidades", bases[bancoDadosJC.getSelectedIndex()]);
            arquivo.secondLine();
            while (arquivo.next()) {
                String Linha = arquivo.readLine();
                String[] vDados = Linha.split("[;]");
                StringBuilder sql = new StringBuilder();
                sql.append("INSERT INTO cidades ([pais],[codPais],[municipio],[codMunicipio],[uf],[distrito]) VALUES");
                sql.append("('").append(vDados[1]).append("'")
                        .append(", ").append(vDados[2])
                        .append(", '").append(vDados[3]).append("'")
                        .append(", ").append(vDados[4])
                        .append(", '").append(vDados[5]).append("'")
                        .append(", ").append(vDados[6])
                        .append(")");
                try {
                    ExecutaQuery.executeSqlScript(sql, bases[bancoDadosJC.getSelectedIndex()]);
                    setLog(vDados[3], "script");
                } catch (SQLException e) {
                    setLog(e);
                }
            }
        } catch (IOException | SQLException e) {
            setLog(e);
        }
    }

    private void Gravar() throws HeadlessException {
        try (FileWriter x = new FileWriter(arquivoImportador, false)) {
            ArrayList<StringBuilder> linhas = new ArrayList<>();
            for (Importador i : importadorTableModel.getDados()) {
//                StringBuilder b = new StringBuilder();
//                b.append(i.getOrigem());
//                b.append(";");
//                b.append(i.getDestino());
//                b.append(";");
//                b.append(i.getScript());
//                b.append(System.lineSeparator());
                linhas.add(i.toStringBuilder().append(System.lineSeparator()));
            }
//            //conteudo += "\n\r"; // criando nova linha e recuo no arquivo
//            String conteudo = new String();
//            x.write(conteudo); // armazena o texto no objeto x, que aponta para o arquivo
            x.write("[");
            x.write(origenFileTF.getText());
            x.write("];");
            x.write("[");
            x.write(tabelasCB.getSelectedItem().toString());
            x.write("]");
            x.write(System.lineSeparator());
            for (StringBuilder linha : linhas) {
                x.write(linha.toString());
            }
            JOptionPane.showMessageDialog(null, "Arquivo gravado com sucesso", "ConcluÔøΩdo", JOptionPane.INFORMATION_MESSAGE);
        } catch (HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "AtenÔøΩÔøΩo", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CaregarTabela() {
        try {
            importadorTableModel.onRemoveAll();
            if (arquivoImportador != null || "".equals(arquivoImportador)) {
                File arquivo = new File(arquivoImportador);
                FileInputStream inputStream = new FileInputStream(arquivo);
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                String linha = bufferedReader.readLine();
                boolean p = true;
                if (linha != null) {
                    do {
                        String[] row = linha.split(";", 3);
                        if (p) {
                            origenFileTF.setText(row[0].replace("[", "").replace("]", ""));
                            caregarArquivo();
                            conectaTabelasJsys();
                            tabelasCB.setSelectedItem(row[1].replace("[", "").replace("]", ""));
                            setSelectedTabelaJsys();
                        } else {
                            importadorTableModel.addRow(new Importador(row[0], row[1], row[2]));
                        }
                        linha = bufferedReader.readLine();
                        p = false;
                    } while (linha != null);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void deleteRow() {
        //((DefaultTableModel) jTable1.getModel()).removeRow(jTable1.getSelectedRow());
        importadorTableModel.removeRow(jTable1.getSelectedRow());
    }

    private void caregarArquivo() {
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            DocumentBuilder docBuilder = dbf.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(origenFileTF.getText()));
            NodeList rows = doc.getElementsByTagName("ROW");
            List<String> list = new ArrayList<>();
            list.add("");
            for (int i = 0; i < rows.getLength(); i++) {
                Node row = rows.item(i);
                if (row.getNodeType() == Node.ELEMENT_NODE) {
                    NamedNodeMap map = row.getAttributes();
                    for (int j = 0; j < map.getLength(); j++) {
                        String iten = map.item(j).toString().split("=\"")[0];
                        if (!list.contains(iten)) {
                            list.add(iten);
                        }
                    }
                    String[] col = new String[list.size()];
                    col = list.toArray(col);
                    if (jTable1.getColumnModel().getColumnCount() > 0) {
                        jTable1.getColumnModel().getColumn(0).setCellEditor(new br.sql.editor.JComboBoxTableCellEditor(col));
                    }
                }
            }
        } catch (ParserConfigurationException | SAXException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void setSelectedTabelaJsys() {
        List<String> list = ExecutaQuery.getColuns(tabelasCB.getSelectedItem().toString(), bases[bancoDadosJC.getSelectedIndex()]);
        String[] col = new String[list.size()];
        col = list.toArray(col);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setCellEditor(new br.sql.editor.JComboBoxTableCellEditor(col));
        }
    }

    private void conectaTabelasJsys() {
        List<String> list = ExecutaQuery.getTables(bases[bancoDadosJC.getSelectedIndex()]);
        String[] tabelas = new String[list.size()];
        tabelas = list.toArray(tabelas);
        ComboBoxModel<String> comboModel = new javax.swing.DefaultComboBoxModel<>(tabelas);
        tabelasCB.setModel(comboModel);
    }
}
