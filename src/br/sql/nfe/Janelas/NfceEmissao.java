package br.sql.nfe.Janelas;

import br.com.samuelweb.nfe.util.ConstantesUtil;
import br.sql.acesso.SQLDatabaseConnection;
import br.sql.bean.JsysNFe;
import br.sql.bean.JsysOrcamento;
import br.sql.bean.JsysParametros;
import br.sql.nfe.danfe.ImprimirDanfe;
import br.sql.nfe.links.ConstantesFiscal;
import br.sql.nfe.xml.GerandoNFeJAXB;
import br.sql.janelas.liberacoes.LiberacaoGeralJanelaJDialog;
import br.sql.janelas.utilitarios.CertificadoA1Informacoes;
import br.sql.janelas.utilitarios.ParametrosLocaisJanelas;
import br.sql.log.Log;
import br.sql.nfe.util.XmlUtil;
import br.sql.util.ManagerData;
import br.sql.util.ManagerDecimal;
import br.sql.util.ManagerString;
import br.sql.util.Retorna;
import br.sql.util.Validar;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Juliano Alves Medina
 */
public final class NfceEmissao extends javax.swing.JDialog implements
        PropertyChangeListener {

    private JsysOrcamento venda;
    private String serie;
    protected String RecebeVenda;
    private final StringBuilder mensagenCaixa = new StringBuilder();
    private final JsysParametros par;
    private static final SQLDatabaseConnection DADOS = new SQLDatabaseConnection();

    /**
     * Creates new form ECFJanelaImprimir
     *
     * @param parent
     * @param modal
     */
    public NfceEmissao(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        Date data = ManagerData.getDate();
        Date dataValidadeCertificado = CertificadoA1Informacoes.getCertificado().getNotAfter();
        par = Retorna.JsysParametros();
        double dias = ManagerData.dateDiffDay(data, dataValidadeCertificado);
        mensagenCaixa.append("Certificado valido por ");
        mensagenCaixa.append(ManagerDecimal.converter(dias, "#,##0"));
        mensagenCaixa.append(dias > 1 ? " dias; " : " dia; ");
        mensagenCaixa.append(ConstantesFiscal.statusSefaz(par.getcStat65()));
        initComponents();
        if (dias <= 30) {
            XmotivoTF.setForeground(Color.red);
            XmotivoTF.setFont(getFont().deriveFont(Font.BOLD));
        }
    }

    /**
     * Set the value of RecebeVenda
     *
     * @param RecebeVenda new value of RecebeVenda
     */
    public void setRecebeVenda(Integer RecebeVenda) {
        this.RecebeVenda = RecebeVenda.toString();
        jTextFieldIdVenda.setText(RecebeVenda.toString());
        setVenda();
        jTextFieldIdVenda.selectAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldIdVenda = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        XmotivoTF = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldData = new javax.swing.JTextField();
        jTextFieldValor = new javax.swing.JTextField();
        jTextFieldCpfCnpj = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldEndereco = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NFC-e");
        setResizable(false);

        jTextFieldIdVenda.setDocument(new br.sql.plainDocument.IntegerDocument());
        jTextFieldIdVenda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldIdVendaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldIdVendaKeyReleased(evt);
            }
        });

        startButton.setText("Emitir");
        startButton.setToolTipText("");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("NFC-e");
        jLabel1.setToolTipText("");

        XmotivoTF.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        XmotivoTF.setText(mensagenCaixa.toString());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(XmotivoTF)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(XmotivoTF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setText("Venda:");

        jLabel3.setText("Valor:");

        jLabel5.setText("Data:");

        jTextFieldData.setEditable(false);
        jTextFieldData.setBackground(new java.awt.Color(255, 255, 102));

        jTextFieldValor.setEditable(false);
        jTextFieldValor.setBackground(new java.awt.Color(255, 255, 102));

        jTextFieldCpfCnpj.setToolTipText("");
        jTextFieldCpfCnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldCpfCnpjKeyPressed(evt);
            }
        });

        jLabel4.setText("CPF/CNPJ:");
        jLabel4.setToolTipText("");

        jLabel6.setText("Cliente:");

        jTextFieldCliente.setEditable(false);
        jTextFieldCliente.setBackground(new java.awt.Color(255, 255, 102));

        jLabel7.setText("Endere√ßo:");

        jTextFieldEndereco.setEditable(false);
        jTextFieldEndereco.setBackground(new java.awt.Color(255, 255, 102));

        taskOutput.setColumns(20);
        taskOutput.setRows(5);
        jScrollPane1.setViewportView(taskOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldData, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldIdVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 385, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCpfCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldCliente)
                            .addComponent(jTextFieldEndereco))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldIdVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCpfCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldData, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startButton)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (validar()) {
            if (par.getUtilizarNfce()) {
                startButton.setEnabled(false);
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                //Instances of javax.swing.SwingWorker are not reusuable, so
                //we create new instances as needed.
                Task task = new Task(par, this);
                task.execute();
            } else {
                if (verificaReimpressao()) {
                    agendaImpressaoCup();
                } else {
                    LiberacaoGeralJanelaJDialog lg = new LiberacaoGeralJanelaJDialog(null, true);
                    lg.setId(venda.getIdOrcamento());
                    lg.setTipo(4);
                    lg.setVisible(true);
                    if (lg.isConfirma()) {
                        agendaImpressaoCup();
                    } else {
                        JOptionPane.showMessageDialog(null, "N√£o foi poss√≠vel Reimprimir a NFC-e", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void jTextFieldIdVendaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIdVendaKeyReleased
        setVenda();
    }//GEN-LAST:event_jTextFieldIdVendaKeyReleased

    private void jTextFieldIdVendaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIdVendaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jTextFieldCpfCnpj.requestFocus();
            jTextFieldCpfCnpj.selectAll();
        }
    }//GEN-LAST:event_jTextFieldIdVendaKeyPressed

    private void jTextFieldCpfCnpjKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCpfCnpjKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            startButton.doClick();
        }
    }//GEN-LAST:event_jTextFieldCpfCnpjKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel XmotivoTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCliente;
    private javax.swing.JTextField jTextFieldCpfCnpj;
    private javax.swing.JTextField jTextFieldData;
    private javax.swing.JTextField jTextFieldEndereco;
    private javax.swing.JTextField jTextFieldIdVenda;
    private javax.swing.JTextField jTextFieldValor;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startButton;
    private javax.swing.JTextArea taskOutput;
    // End of variables declaration//GEN-END:variables

    private void setVenda() {
        venda = new JsysOrcamento(0);
        jTextFieldData.setText("");
        jTextFieldCliente.setText("Venda N√£o Encontrada");
        jTextFieldCpfCnpj.setText("");
        jTextFieldEndereco.setText("");
        jTextFieldValor.setText("");
        try {
            Map<Object, Object> filtro = new HashMap<>();
            filtro.put("idOrcamento", Integer.parseInt(jTextFieldIdVenda.getText()));
            venda = (JsysOrcamento) Retorna.findOneResult("JsysOrcamento.findByFechado", filtro);
            if (venda != null) {
                jTextFieldData.setText(ManagerData.convertBrDate(venda.getData()));
                jTextFieldCliente.setText(venda.getIdCliente().getNomeCorentista());
                jTextFieldCpfCnpj.setText(venda.getIdCliente().getCnpjCpf());
                jTextFieldEndereco.setText(venda.getIdCliente().getEndereco() + " - " + venda.getIdCliente().getBairro());
                jTextFieldValor.setText(ManagerDecimal.converter(venda.getValorLiquido()));
            }
        } catch (NumberFormatException ignore) {
        }
    }

    private JsysNFe getJsysNFe() {
        Map<Object, Object> filtro = new HashMap<>();
        filtro.put("venda", venda.getIdOrcamento());
        JsysNFe nfe = (JsysNFe) Retorna.findOneResult("JsysNFe.findNFeByVendaEmitida", filtro);
        if (nfe != null && nfe.getMod() == ConstantesFiscal.NFC_E) {
            return nfe;
        } else if (nfe != null && nfe.getMod() == ConstantesFiscal.NF_E) {
            taskOutput.append(String.format("NF-e j√° emitida em Modelo do Documento Fiscal 55" + System.getProperty("line.separator")));
            return null;
        } else if (nfe == null) {
            nfe = new JsysNFe();
            return nfe;
        }
        return null;
    }

    private boolean validarDados() {
        if (serie == null || "".equals(serie)) {
            JOptionPane.showMessageDialog(this, "Erro na Serie do NFC-e Verificar Par√¢metros Locais", "ERRO", JOptionPane.ERROR_MESSAGE);
            ParametrosLocaisJanelas parlocal = new ParametrosLocaisJanelas(new javax.swing.JFrame(), true);
            parlocal.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean validar() {
        if (!"".equals(jTextFieldCpfCnpj.getText()) && !Validar.cpfCnpj(jTextFieldCpfCnpj.getText())) {
            JOptionPane.showMessageDialog(this, "CPF ou CNPJ √© Invalido!", "ERRO", JOptionPane.ERROR_MESSAGE);
            jTextFieldCpfCnpj.requestFocus();
            jTextFieldCpfCnpj.selectAll();
            return false;
        }
        if (venda == null || venda.getIdOrcamento() == 0) {
            JOptionPane.showMessageDialog(this, "C√≥digo da venda √© Invalido!", "ERRO", JOptionPane.ERROR_MESSAGE);
            jTextFieldIdVenda.requestFocus();
            jTextFieldIdVenda.selectAll();
            return false;
        }
        if (!"107".equals(par.getcStat65())) {
            JOptionPane.showMessageDialog(this, ConstantesFiscal.statusSefaz(par.getcStat65()), "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    //private Task task;
    private class Task extends SwingWorker<Boolean, String> {

        private final JsysParametros par;

        private Task(JsysParametros par, NfceEmissao aThis) {
            this.par = par;
            addPropertyChangeListener(aThis);
        }

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Boolean doInBackground() throws NumberFormatException, HeadlessException, NoSuchAlgorithmException, Exception {
            //Initialize progress property.
            setProgress(0);
            serie = br.JavaApplicationJsys.INI.getString("FISCAL", "SERIE");
            setProgress(20);
            JsysNFe nfe = getJsysNFe();
            if (nfe != null) {
                if (nfe.getEmitida()) {
                    if (nfe.getMod() == ConstantesFiscal.NFC_E) {
                        publish("Reimpress√£o");
                        setProgress(100);
                        ImprimirDanfe.nfce(nfe.getChaveAcesso());
                        return true;
                    }
                    publish("Venda Emitida em NF-e");
                    setProgress(100);
                    return false;
                } else {
                    if (validarDados()) {
                        nfe.setCMunFG(String.valueOf(par.getCodMunicipio()));
                        nfe.setCUF(String.valueOf(par.getCodMunicipio()).substring(0, 2));
                        nfe.setFinNFe("1");
                        nfe.setIdDest("1");
                        nfe.setIndFinal("1");
                        nfe.setIndPag("1");
                        nfe.setIndPres("1");
                        nfe.setIndSinc(true);
                        nfe.setMod(ConstantesFiscal.NFC_E);
                        nfe.setNatOp("Venda");
                        nfe.setSerie(serie);
                        nfe.setTpAmb(ConstantesFiscal.AMBIENTE.TP_AMB);
                        nfe.setTpEmis(par.getTpEmis().toString());
                        nfe.setTpImp("4");
                        nfe.setTpNF(true);
                        nfe.setVenda(venda.getIdOrcamento());
                        Date d = ManagerData.getDate();
                        nfe.setDhEmi(d);
                        nfe.setDhSaiEnt(d);
                        nfe.setModFrete("9");
                        nfe.setInfCpl(par.getInfCpl());
                        GerandoNFeJAXB xmlNfe = new GerandoNFeJAXB(nfe, jTextFieldCpfCnpj.getText(), "0");
                        // vai gerar o XML
                        if (xmlNfe.gerar()) {
                            publish("XML Assinado");
                            publish("Validado com sucesso");
                            setProgress(40);
                            if (nfe.getTpEmis().equals("9")) {
                                setProgress(80);
                                StringBuilder sql = new StringBuilder();
                                sql.append("UPDATE jsysNFe SET emitida = 1 ");
                                sql.append("WHERE chaveAcesso = '").append(xmlNfe.getChaveAcesso()).append("'");
                                try {
                                    if (DADOS.execSQLUpdate(sql) == 0) {
                                        Log.registraErro(this.getClass().getName(), "doInBackground0", new Exception("erro ao tentar executar o Update na tabela jsysNFe"));
                                    }
                                    if (XmlUtil.verificaCsStat(xmlNfe.getCStat())) {
                                        ImprimirDanfe.nfce(xmlNfe.getChaveAcesso());
                                        return true;
                                    }
                                    return false;
                                } catch (HeadlessException | NumberFormatException | NoSuchAlgorithmException e) {
                                    publish(e.getMessage());
                                    Log.registraErro(this.getClass().getName(), "doInBackground1", e);
                                }
                                setProgress(100);
                            } else {
                                setProgress(80);
                                // vai enviar o XML para Sefaz
                                publish("Iniciando Transmiss√£o");
                                if (xmlNfe.enviarNfe(ConstantesUtil.NFCE)) {
                                    publish(xmlNfe.getMensagem());
                                    setProgress(100);
                                    if (XmlUtil.verificaCsStat(xmlNfe.getCStat())) {
                                        ImprimirDanfe.nfce(xmlNfe.getChaveAcesso());
                                        return true;
                                    }
                                    return false;
                                } else {
                                    publish(xmlNfe.getMensagem());
                                }
                            }
                        } else {
                            publish("Erro ao gerar XML");
                        }
                    } else {
                        publish("Erro encontrado no caixa");
                        setProgress(100);
                    }
                    publish("Finalizado");
                    setProgress(100);
                }
            } else {
                setProgress(100);
                publish("Erro encontrado ao tentar criar a NFC-e");
            }
            return false;
        }

        @Override
        protected void process(List<String> chunks) {
            super.process(chunks); //To change body of generated methods, choose Tools | Templates.
            chunks.stream().forEach((s) -> {
                taskOutput.append(String.format(s + System.getProperty("line.separator")));
            });
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            try {
                Toolkit.getDefaultToolkit().beep();
                startButton.setEnabled(true);
                setCursor(null); //turn off the wait cursor
                if (get()) {
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "ERRO", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
            } catch (InterruptedException | ExecutionException e) {
                Log.registraErro(this.getClass().getName(), "Task", e);
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            progressBar.setValue((Integer) evt.getNewValue());
        }
    }

    private boolean verificaReimpressao() {
        Map<Object, Object> filtro = new HashMap<>();
        filtro.put("venda", venda.getIdOrcamento());
        br.sql.bean.Cupons cup = (br.sql.bean.Cupons) br.sql.util.Retorna.findOneResult("Cupons.findByVenda", filtro);
        return cup == null;
    }

    private void agendaImpressaoCup() {
        String cpfCnpj = ManagerString.RemoveFormatoCpfCnpj(jTextFieldCpfCnpj.getText());
        if ("".equals(cpfCnpj)) {
            cpfCnpj = "00000000000";
        }
        DADOS.execProcedure("LancaCupons(" + venda.getIdOrcamento() + ", '" + cpfCnpj + "')");
        this.dispose();
    }
}
