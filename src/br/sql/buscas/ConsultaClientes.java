package br.sql.buscas;

import br.sql.acesso.SQLDatabaseConnection;
import br.sql.log.Log;
import br.sql.util.ManagerSQL;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juliano Alves Medina
 */
public class ConsultaClientes extends javax.swing.JDialog {
    
    SQLDatabaseConnection dados = new SQLDatabaseConnection();

    /**
     * Creates new form ConsultaClientes
     *
     * @param parent
     * @param modal
     * @param args pode passar o filtro inicial da consulta
     */
    public ConsultaClientes(java.awt.Frame parent, boolean modal, String args) {
        super(parent, modal);
        initComponents();
        consultaTF.setText(args);
        actionConsulta();
    }

    private void actionConsulta() {
        try {
            String campos[] = {"jsysClientes.idCliente",
                "jsysClientes.nomeCorentista",
                "jsysClientes.endereco",
                "jsysClientes.bairro",
                "jsysClientes.cidade",
                "jsysClientes.fone",
                "jsysClientes.celular",
                "jsysClientes.fax",
                "jsysClientes.cnpjCpf"};
            Map<Object, Object> onde = new HashMap<>();
            onde.put("jsysClientes.inativo", "= 0");
            onde.put("jsysClientes.cliente", "= 1");
            ManagerSQL sql = new ManagerSQL();
            sql.setTabela("jsysClientes");
            sql.setCampos(campos);
            sql.setOrder(new String[]{"jsysClientes.nomeCorentista"});
            sql.setOnde(onde);
            ResultSet x = dados.execSQL(sql.getSQL(consultaTF.getText()));
            // Definição do TableModel
            DefaultTableModel aModel = new DefaultTableModel(new Object[][]{}, new String[]{"CODIGO",
                "NOME CLIENTE",
                "ENDEREÇO",
                "BAIRRO",
                "CIDADE",
                "FONE",
                "CELULAR",
                "FAX",
                "CPF / CNPJ"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            java.sql.ResultSetMetaData rsmd = x.getMetaData();
            int colNo = rsmd.getColumnCount();
            while (x.next()) {
                Object[] objects = new Object[colNo];
                for (int i = 0; i < colNo; i++) {
                    objects[i] = x.getObject(i + 1);
                }
                aModel.addRow(objects);
            }
            jTable1.setModel(aModel);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(400);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(170);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(170);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(170);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(180);

            jTable1.setDefaultRenderer(Object.class, zebradoTableCellRenderer1);
        } catch (SQLException e) {
            Log.registraErro(this.getClass().getName(), "actionConsulta", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zebradoTableCellRenderer1 = new br.sql.defaultTableCellRenderer.Zebrado();
        consultaTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        zebradoTableCellRenderer1.setText("zebradoTableCellRenderer1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        consultaTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consultaTFKeyPressed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setRowHeight(25);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                    .addComponent(consultaTF))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consultaTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void consultaTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consultaTFKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            selecionaTabela();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            actionConsulta();
        }
    }//GEN-LAST:event_consultaTFKeyPressed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            envia();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() > 1) {
            envia();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ConsultaClientes dialog = new ConsultaClientes(new javax.swing.JFrame(), true, args[0]);
                dialog.setLocationRelativeTo(null);
                Toolkit toolkit = Toolkit.getDefaultToolkit();
                Dimension screenSize = toolkit.getScreenSize();
                dialog.setBounds(0, 0, screenSize.width, screenSize.height);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField consultaTF;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private br.sql.defaultTableCellRenderer.Zebrado zebradoTableCellRenderer1;
    // End of variables declaration//GEN-END:variables

    public String retorno;

    /**
     * Get the value of retorno
     *
     * @return the value of retorno
     */
    public String getRetorno() {
        return retorno;
    }

    /**
     * Set the value of retorno
     *
     * @param retorno new value of retorno
     */
    public void setRetorno(String retorno) {
        this.retorno = retorno;
    }

    private void selecionaTabela() {
        try {
            jTable1.requestFocus();
            jTable1.setRowSelectionInterval(0, 0);
        } catch (Exception ignore) {
        }
    }

    private void envia() {
        setRetorno(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
        this.dispose();
    }

}
