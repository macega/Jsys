package br.sql.janelas.deposito;

import br.sql.acesso.SQLDatabaseConnection;
import br.sql.log.Log;
import static br.JavaApplicationJsys.OPTIONS;
import br.sql.util.Progress;
import br.sql.util.ReportUtils;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juliano Alves Medina
 */
public class listaPedidos extends javax.swing.JFrame {
    
    private static final SQLDatabaseConnection DADOS = new SQLDatabaseConnection();

    /**
     * Creates new form listaPedidos
     */
    public listaPedidos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        masterTablePedidos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Pedidos");

        masterTablePedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(masterTablePedidos);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Listar Pedidos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Lista de Pedidos");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton2.setText("Imprimir Pedido");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTablePedidos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), jButton2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Listar Pedidos Antigos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final Progress p = new Progress();
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Void doInBackground() {
                try {
                    listaPedidos();
                } catch (SQLException e) {
                    Log.registraErro(this, "jButton1ActionPerformed", e);
                }
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.dispose();
            }
        };
        worker.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Map<Object, Object> parametros = new HashMap<>();
        String loja = masterTablePedidos.getValueAt(masterTablePedidos.getSelectedRow(), 0).toString();
        String id = masterTablePedidos.getValueAt(masterTablePedidos.getSelectedRow(), 2).toString();
        parametros.put("loja", loja);
        parametros.put("idPedido", id);
        ReportUtils.openReport("Pedido Impress√£o", "/br/rel/pedidos/pedido.jasper", parametros);
        if (JOptionPane.showOptionDialog(null, "Deseja Finalizar o Pedido?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, OPTIONS, OPTIONS[1]) == 0) {
            DADOS.execSQL("UPDATE [" + loja + "].DADOS.DBO.PedidoCompras "
                    + "SET impresso = 1 "
                    + "WHERE (idpedido = " + id + ") ");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final Progress p = new Progress();
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    listaPedidosGeral();
                } catch (SQLException e) {
                    Log.registraErro(this.getClass().getName(), "jButton2ActionPerformed", e);
                }
                return null;
            }

            @Override
            protected void done() {
                super.done();
                p.dispose();
            }

        };
        worker.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable masterTablePedidos;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void listaPedidosGeral() throws SQLException {
        String sql = "DECLARE @Srv sysname, @BD sysname, @Comando NVARCHAR(max), @Comando2 NVARCHAR(max) "
                + "DECLARE cServer CURSOR FOR "
                + "SELECT name "
                + "  FROM SYS.SERVERS "
                + " WHERE is_linked = 1 "
                + "  ORDER BY Name "
                + "SET @Comando2 = N'' "
                + "OPEN cServer "
                + "FETCH NEXT FROM cServer INTO @Srv "
                + "WHILE @@FETCH_STATUS = 0 "
                + "BEGIN "
                + "    BEGIN TRY "
                + "        EXEC sp_testlinkedserver @Srv "
                + "        SET @Comando = N'SELECT ''' + @Srv + ''' AS endLoja ' + "
                + "		                ', CASE WHEN ''10.9.0.5'' = ''' + @Srv + ''' THEN ''AMA'' WHEN ''10.9.0.9'' = ''' + @Srv + ''' THEN ''JAT'' WHEN ''10.9.0.13'' = ''' + @Srv + ''' THEN ''BIG'' WHEN ''10.9.0.1'' = ''' + @Srv + ''' THEN ''DEP'' ELSE ''DESCONHECIDO'' END AS nomeLoja, ' + "
                + "		                ' idPedido, convert(varchar, dataPedido, 103), usuario ' + "
                + "                        'FROM [' + @Srv + '].DADOS.DBO.PedidoCompras ' + "
                + "                        'WHERE (confirmado = 1) ' + "
                + "						'UNION ALL ' "
                + "    END TRY "
                + "    BEGIN CATCH "
                + "        SET @Comando = N'SELECT ''' + @Srv + ''' AS endLoja,  CASE WHEN ''10.9.0.5'' = ''' + @Srv + ''' THEN ''AMA OFF-LINE'' WHEN ''10.9.0.9'' = ''' + @Srv + ''' THEN ''JAT OFF-LINE'' WHEN ''10.9.0.13'' = ''' + @Srv + ''' THEN ''BIG OFF-LINE '' WHEN ''10.9.0.1'' = ''' + @Srv + ''' THEN ''DEP OFF-LINE'' ELSE ''DESCONHECIDO OFF-LINE'' END AS nomeLoja, ' + "
                + "		 '0 AS idPedido, convert(varchar, GETDATE(), 103) AS dataPedido, ''LOJA OFF-LINE'' AS usuario ' + "
                + "		 'UNION ALL ' "
                + "    END CATCH "
                + "	SET @Comando2 = @Comando2 + N' ' + @Comando "
                + "    FETCH NEXT FROM cServer INTO @Srv "
                + "END "
                + "CLOSE cServer "
                + "DEALLOCATE cServer "
                + "SET @Comando2 = @Comando2 + N'SELECT ''10.9.0.1'' AS endLoja, ''DEP'' AS nomeLoja, idPedido, convert(varchar, dataPedido, 103), usuario ' + "
                + "							 'FROM PedidoCompras ' + "
                + "							 'WHERE (confirmado = 1) ' "
                + "EXEC SP_EXECUTESQL @Comando2";
        ResultSet x = DADOS.execSQL(sql);
        // Defini√ß√£o do TableModel
        String[] tableColumnsName = {"Endere√ßo loja", "Nome Loja", "N¬∫ Pedido", "Data", "Usuario"};
        DefaultTableModel aModel = new DefaultTableModel();
        aModel.setColumnIdentifiers(tableColumnsName);
        java.sql.ResultSetMetaData rsmd = x.getMetaData();
        int colNo = rsmd.getColumnCount();
        while (x.next()) {
            Object[] objects = new Object[colNo];
            for (int i = 0; i < colNo; i++) {
                objects[i] = x.getObject(i + 1);
            }
            aModel.addRow(objects);
        }
        masterTablePedidos.setModel(aModel);
    }

    public void listaPedidos() throws SQLException {
        String sql = "DECLARE @Srv sysname, @BD sysname, @Comando NVARCHAR(max), @Comando2 NVARCHAR(max) "
                + "DECLARE cServer CURSOR FOR "
                + "SELECT name "
                + "  FROM SYS.SERVERS "
                + " WHERE is_linked = 1 "
                + "  ORDER BY Name "
                + "SET @Comando2 = N'' "
                + "OPEN cServer "
                + "FETCH NEXT FROM cServer INTO @Srv "
                + "WHILE @@FETCH_STATUS = 0 "
                + "BEGIN "
                + "    BEGIN TRY "
                + "        EXEC sp_testlinkedserver @Srv "
                + "        SET @Comando = N'SELECT ''' + @Srv + ''' AS endLoja ' + "
                + "		                ', CASE WHEN ''10.9.0.5'' = ''' + @Srv + ''' THEN ''AMA'' WHEN ''10.9.0.9'' = ''' + @Srv + ''' THEN ''JAT'' WHEN ''10.9.0.13'' = ''' + @Srv + ''' THEN ''BIG'' WHEN ''10.9.0.1'' = ''' + @Srv + ''' THEN ''DEP'' ELSE ''DESCONHECIDO'' END AS nomeLoja, ' + "
                + "		                ' idPedido, convert(varchar, dataPedido, 103), usuario ' + "
                + "                        'FROM [' + @Srv + '].DADOS.DBO.PedidoCompras ' + "
                + "                        'WHERE (impresso = 0) AND (confirmado = 1) ' + "
                + "						'UNION ALL ' "
                + "    END TRY "
                + "    BEGIN CATCH "
                + "        SET @Comando = N'SELECT ''' + @Srv + ''' AS endLoja,  CASE WHEN ''10.9.0.5'' = ''' + @Srv + ''' THEN ''AMA OFF-LINE'' WHEN ''10.9.0.9'' = ''' + @Srv + ''' THEN ''JAT OFF-LINE'' WHEN ''10.9.0.13'' = ''' + @Srv + ''' THEN ''BIG OFF-LINE '' WHEN ''10.9.0.1'' = ''' + @Srv + ''' THEN ''DEP OFF-LINE'' ELSE ''DESCONHECIDO OFF-LINE'' END AS nomeLoja, ' + "
                + "		 '0 AS idPedido, convert(varchar, GETDATE(), 103) AS dataPedido, ''LOJA OFF-LINE'' AS usuario ' + "
                + "		 'UNION ALL ' "
                + "    END CATCH "
                + "	SET @Comando2 = @Comando2 + N' ' + @Comando "
                + "    FETCH NEXT FROM cServer INTO @Srv "
                + "END "
                + "CLOSE cServer "
                + "DEALLOCATE cServer "
                + "SET @Comando2 = @Comando2 + N'SELECT ''10.9.0.1'' AS endLoja, ''DEP'' AS nomeLoja, idPedido, convert(varchar, dataPedido, 103), usuario ' + "
                + "							 'FROM PedidoCompras ' + "
                + "							 'WHERE (impresso = 0) AND (confirmado = 1) ' "
                + "EXEC SP_EXECUTESQL @Comando2";
        ResultSet x = DADOS.execSQL(sql);
        // Defini√ß√£o do TableModel
        String[] tableColumnsName = {"Endere√ßo loja", "Nome Loja", "N¬∫ Pedido", "Data", "Usuario"};
        DefaultTableModel aModel = new DefaultTableModel();
        aModel.setColumnIdentifiers(tableColumnsName);
        java.sql.ResultSetMetaData rsmd = x.getMetaData();
        int colNo = rsmd.getColumnCount();
        while (x.next()) {
            Object[] objects = new Object[colNo];
            for (int i = 0; i < colNo; i++) {
                objects[i] = x.getObject(i + 1);
            }
            aModel.addRow(objects);
        }
        masterTablePedidos.setModel(aModel);
    }

}
