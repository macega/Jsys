package br.sql.janelas.deposito;

import br.sql.acesso.ConnectionFactory;
import br.sql.acesso.SQLDatabaseConnection;
import br.sql.bean.JsysClientes;
import br.sql.bean.JsysProdutosTPrecos;
import br.sql.bean.TransferenciasProdutos;
import br.sql.bean.TransferenciasProdutosItens;
import br.sql.bean.TransferenciasProdutosItensPK;
import br.sql.bean.views.JsysIdProdutos;
import br.sql.log.Log;
import br.sql.util.ManagerData;
import br.sql.util.ManagerDecimal;
import br.sql.util.Progress;
import br.sql.util.ReportUtils;
import br.sql.util.Retorna;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import javax.persistence.RollbackException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jsys.sql.Menu;

/**
 *
 * @author Juliano Alves Medina
 */
public class TransferenciaDeposito extends JPanel implements PropertyChangeListener {

    private TransferenciasProdutos tranfereciaAtual;
    private JsysProdutosTPrecos produtoAtual;
    private static final SQLDatabaseConnection DADOS = new SQLDatabaseConnection();

    public TransferenciaDeposito() {
        initComponents();
        // carega registros dos Clientes
        for (Object C : Retorna.findList("JsysClientes.findAllFilial")) {
            JsysClientes c = (JsysClientes) C;
            uJComboBoxClientes.addItem(c.getNomeCorentista(), c);
            filtroClienteCB.addItem(c.getNomeCorentista(), c);
        }
        jTabbedPane1.setEnabledAt(1, false);
        jProgressBarProduto.setVisible(false);

        masterTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (masterTable.getSelectedRow() != -1) {
                    jTabbedPane1.setEnabledAt(1, true);
                    tranfereciaAtual = list.get(masterTable.convertRowIndexToModel(masterTable.getSelectedRow()));
                    UsuariojTextField.setText(tranfereciaAtual.getUsuario());
                    datajTextField.setText(ManagerData.convertBrDate(tranfereciaAtual.getData()));
                    codigojLabel.setText(tranfereciaAtual.getIdTransf().toString());
                    Map<Object, Object> filtro = new HashMap<>();
                    filtro.put("idCliente", tranfereciaAtual.getIdCliente().getIdCliente());
                    JsysClientes c = (JsysClientes) Retorna.findOneResult("JsysClientes.findByIdCliente", filtro);
                    if (c != null) {
                        uJComboBoxClientes.setSelectedItem(c.getNomeCorentista());
                    }
                } else {
                    tranfereciaAtual = null;
                    jTabbedPane1.setEnabledAt(1, false);
                    UsuariojTextField.setText("");
                    datajTextField.setText("");
                    codigojLabel.setText("0");
                    uJComboBoxClientes.setSelectedIndex(-1);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        query = java.beans.Beans.isDesignTime() ? null : ConnectionFactory.getEntityManagerNew().createQuery("SELECT t FROM TransferenciasProdutos t WHERE t.confirmado = false AND t.cancelado = false");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        filtroTodosCKB = new javax.swing.JCheckBox();
        filtroClienteCB = new componentes.UJComboBox();
        filtroEmAbertoCKB = new javax.swing.JCheckBox();
        dataInicial = new com.toedter.calendar.JDateChooser();
        dataFinal = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        deleteDetailButton = new javax.swing.JButton();
        detailScrollPane = new javax.swing.JScrollPane();
        detailTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        UsuariojTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        datajTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        uJComboBoxClientes = new componentes.UJComboBox();
        jLabel5 = new javax.swing.JLabel();
        CodigoTextField = new javax.swing.JTextField();
        JLdescrisaoProduto = new javax.swing.JTextField();
        quantidadeTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        FechaTranferenciajButton = new javax.swing.JButton();
        botaoImprimir = new javax.swing.JButton();
        jProgressBarProduto = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        codigojLabel = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        newButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        newButton.setForeground(new java.awt.Color(0, 153, 0));
        newButton.setText("Nova ");
        newButton.addActionListener(formListener);

        masterTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idTransf}"));
        columnBinding.setColumnName("Id Transf");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${data}"));
        columnBinding.setColumnName("Data");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idCliente.nomeCorentista}"));
        columnBinding.setColumnName("Cliente");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idloja}"));
        columnBinding.setColumnName("Idloja");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${usuario}"));
        columnBinding.setColumnName("Usuario");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${confirmado}"));
        columnBinding.setColumnName("Confirmado");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cancelado}"));
        columnBinding.setColumnName("Cancelado");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalCompra}"));
        columnBinding.setColumnName("Total Compra");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalVenda}"));
        columnBinding.setColumnName("Total Venda");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterScrollPane.setViewportView(masterTable);
        if (masterTable.getColumnModel().getColumnCount() > 0) {
            masterTable.getColumnModel().getColumn(2).setPreferredWidth(250);
        }

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(204, 0, 0));
        deleteButton.setText("Cancelar");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == true}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        refreshButton.setText("Atualizar");
        refreshButton.addActionListener(formListener);

        jButton1.setText("Reabrir");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == true}"), jButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(formListener);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));

        jButton2.setText("Filtrar");
        jButton2.addActionListener(formListener);

        filtroTodosCKB.setSelected(true);
        filtroTodosCKB.setText("Todos");
        filtroTodosCKB.setToolTipText("");
        filtroTodosCKB.addItemListener(formListener);

        filtroClienteCB.setToolTipText("");
        filtroClienteCB.setEnabled(false);

        filtroEmAbertoCKB.setSelected(true);
        filtroEmAbertoCKB.setText("Em aberto");

        dataInicial.setDate(ManagerData.sumDays(ManagerData.getDate(), -7)
        );

        dataFinal.setDate(ManagerData.getDate());

        jLabel8.setText("Data Inicial");
        jLabel8.setToolTipText("");

        jLabel9.setText("Data Final");
        jLabel9.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(filtroClienteCB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(filtroEmAbertoCKB)
                        .addGap(18, 18, 18)
                        .addComponent(filtroTodosCKB)
                        .addGap(18, 18, 18)
                        .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filtroTodosCKB)
                        .addComponent(filtroEmAbertoCKB))
                    .addComponent(dataInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filtroClienteCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)))
        );

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 204));
        jButton3.setText("Fechar");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), jButton3, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton3.addActionListener(formListener);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(newButton)
                    .addComponent(refreshButton)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Lista de Transferencias", null, jPanel1, "");

        deleteDetailButton.setText("Apagar Produto Selecionado");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), deleteDetailButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteDetailButton.addActionListener(formListener);

        detailTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        detailTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${selectedElement.transferenciasProdutosItensCollection}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, eLProperty, detailTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${transferenciasProdutosItensPK.idProduto}"));
        columnBinding.setColumnName("Codigo");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${jsysProdutosT.nomeProduto}"));
        columnBinding.setColumnName("Descrição");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantidade}"));
        columnBinding.setColumnName("Quantidade");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precoCompra}"));
        columnBinding.setColumnName("Preco Compra");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precoVenda}"));
        columnBinding.setColumnName("Preco Venda");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding.setEditable(false);
        jTableBinding.setSourceUnreadableValue(java.util.Collections.emptyList());
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), detailTable, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        detailScrollPane.setViewportView(detailTable);
        if (detailTable.getColumnModel().getColumnCount() > 0) {
            detailTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            detailTable.getColumnModel().getColumn(1).setPreferredWidth(300);
            detailTable.getColumnModel().getColumn(2).setPreferredWidth(70);
            detailTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            detailTable.getColumnModel().getColumn(4).setPreferredWidth(70);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Usuário");
        jLabel2.setToolTipText("");

        UsuariojTextField.setEditable(false);
        UsuariojTextField.setBackground(new java.awt.Color(255, 255, 204));
        UsuariojTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        UsuariojTextField.setToolTipText("");
        UsuariojTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        UsuariojTextField.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Data");
        jLabel3.setToolTipText("");

        datajTextField.setEditable(false);
        datajTextField.setBackground(new java.awt.Color(255, 255, 204));
        datajTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        datajTextField.setToolTipText("");
        datajTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        datajTextField.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Cliente");
        jLabel4.setToolTipText("");

        uJComboBoxClientes.setAutocompletar(true);
        uJComboBoxClientes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), uJComboBoxClientes, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        uJComboBoxClientes.addItemListener(formListener);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Codigo");

        CodigoTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), CodigoTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        CodigoTextField.addFocusListener(formListener);
        CodigoTextField.addKeyListener(formListener);

        JLdescrisaoProduto.setEditable(false);
        JLdescrisaoProduto.setBackground(new java.awt.Color(255, 255, 204));
        JLdescrisaoProduto.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        JLdescrisaoProduto.setText("<- Digite o codigo do Produto!!");
        JLdescrisaoProduto.setToolTipText("");
        JLdescrisaoProduto.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        JLdescrisaoProduto.setEnabled(false);

        quantidadeTextField.setDocument(new br.sql.plainDocument.IntegerDocument());
        quantidadeTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        quantidadeTextField.setText("1");
        quantidadeTextField.setToolTipText("");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), quantidadeTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        quantidadeTextField.addFocusListener(formListener);
        quantidadeTextField.addKeyListener(formListener);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Descrição");
        jLabel6.setToolTipText("");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Quantidade");
        jLabel7.setToolTipText("");

        FechaTranferenciajButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        FechaTranferenciajButton.setForeground(new java.awt.Color(0, 0, 204));
        FechaTranferenciajButton.setText("Fechar");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.confirmado == false}"), FechaTranferenciajButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        FechaTranferenciajButton.addActionListener(formListener);

        botaoImprimir.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        botaoImprimir.setText("Imprimir");
        botaoImprimir.setToolTipText("");
        botaoImprimir.addActionListener(formListener);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detailScrollPane)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(uJComboBoxClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UsuariojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(datajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CodigoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLdescrisaoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(quantidadeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(deleteDetailButton)
                        .addGap(93, 93, 93)
                        .addComponent(jProgressBarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FechaTranferenciajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uJComboBoxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsuariojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CodigoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLdescrisaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantidadeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteDetailButton)
                            .addComponent(botaoImprimir)
                            .addComponent(FechaTranferenciajButton)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jProgressBarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Itens da Transferencia", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Transferencias");
        jLabel1.setToolTipText("");

        codigojLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        codigojLabel.setText("0");
        codigojLabel.setToolTipText("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(codigojLabel)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(codigojLabel))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("jTabbedPane1");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.ItemListener, java.awt.event.KeyListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == newButton) {
                TransferenciaDeposito.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                TransferenciaDeposito.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                TransferenciaDeposito.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jButton1) {
                TransferenciaDeposito.this.jButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton2) {
                TransferenciaDeposito.this.jButton2ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton3) {
                TransferenciaDeposito.this.jButton3ActionPerformed(evt);
            }
            else if (evt.getSource() == deleteDetailButton) {
                TransferenciaDeposito.this.deleteDetailButtonActionPerformed(evt);
            }
            else if (evt.getSource() == FechaTranferenciajButton) {
                TransferenciaDeposito.this.FechaTranferenciajButtonActionPerformed(evt);
            }
            else if (evt.getSource() == botaoImprimir) {
                TransferenciaDeposito.this.botaoImprimirActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == CodigoTextField) {
                TransferenciaDeposito.this.CodigoTextFieldFocusGained(evt);
            }
            else if (evt.getSource() == quantidadeTextField) {
                TransferenciaDeposito.this.quantidadeTextFieldFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == filtroTodosCKB) {
                TransferenciaDeposito.this.filtroTodosCKBItemStateChanged(evt);
            }
            else if (evt.getSource() == uJComboBoxClientes) {
                TransferenciaDeposito.this.uJComboBoxClientesItemStateChanged(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == CodigoTextField) {
                TransferenciaDeposito.this.CodigoTextFieldKeyPressed(evt);
            }
            else if (evt.getSource() == quantidadeTextField) {
                TransferenciaDeposito.this.quantidadeTextFieldKeyPressed(evt);
            }
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == CodigoTextField) {
                TransferenciaDeposito.this.CodigoTextFieldKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void deleteDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDetailButtonActionPerformed
        final Progress progress = new Progress("Removendo Produto");
        SwingWorker work = new SwingWorker() {

            @Override
            protected Void doInBackground() throws Exception {
                Collection<TransferenciasProdutosItens> ts = tranfereciaAtual.getTransferenciasProdutosItensCollection();
                int[] selected = detailTable.getSelectedRows();
                List<TransferenciasProdutosItens> toRemove = new ArrayList<>(selected.length);
                for (int idx = 0; idx < selected.length; idx++) {
                    selected[idx] = detailTable.convertRowIndexToModel(selected[idx]);
                    int count = 0;
                    Iterator<TransferenciasProdutosItens> iter = ts.iterator();
                    while (count++ < selected[idx]) {
                        iter.next();
                    }
                    TransferenciasProdutosItens t = iter.next();
                    toRemove.add(t);
                    ConnectionFactory.delete(t);
                }
                ts.removeAll(toRemove);
                return null;
            }

            @Override
            protected void done() {
                super.done();
                progress.dispose();
                int index = masterTable.getSelectedRow();
                masterTable.clearSelection();
                masterTable.setRowSelectionInterval(index, index);
                CodigoTextField.requestFocus();
            }
        };
        work.execute();
        progress.setVisible(true);
    }//GEN-LAST:event_deleteDetailButtonActionPerformed

    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        ConnectionFactory.cancelar();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            ConnectionFactory.getEntityManagerNew().refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int index = masterTable.getSelectedRow();
        if (tranfereciaAtual.getCancelado()) {
            JOptionPane.showMessageDialog(null, "Tranferencia Já Cancelada", "ERRO", JOptionPane.ERROR_MESSAGE);
        } else {
            if (tranfereciaAtual.getConfirmado()) {
                tranfereciaAtual.setCancelado(true);
                ConnectionFactory.update(tranfereciaAtual);
                masterTable.clearSelection();
                masterTable.setRowSelectionInterval(index, index);
                baixarEstoque();
                JOptionPane.showMessageDialog(null, "Tranferencia Cancelada com Sucesso", "MENSAGEM", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Tranferencia Não está Fechada", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        if (((JsysClientes) uJComboBoxClientes.getSelectedObject()) instanceof JsysClientes) {
            TransferenciasProdutos T = new TransferenciasProdutos();
            T.setData(ManagerData.getDate());
            T.setIdCliente(((JsysClientes) uJComboBoxClientes.getSelectedObject()));
            T.setIdFuncionario(Menu.getidUsuario());
            T.setIdloja(((JsysClientes) uJComboBoxClientes.getSelectedObject()).getIdLoja());
            T.setUsuario(Menu.getNomeUsuario());
            T.setCancelado(false);
            T.setConfirmado(false);
            T.setTotalCompra(BigDecimal.ZERO);
            T.setTotalVenda(BigDecimal.ZERO);
            ConnectionFactory.insert(T);
            list.add(T);
            int row = list.size() - 1;
            masterTable.setRowSelectionInterval(row, row);
            masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
            jTabbedPane1.setSelectedComponent(this.jPanel2);
            jPanel2.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Não foi encontrado Filial cadastrada.");
        }
    }//GEN-LAST:event_newButtonActionPerformed

    @SuppressWarnings("empty-statement")
    private void CodigoTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CodigoTextFieldKeyReleased
        setProdutoAtual(null);
        Map<Object, Object> filtro = new HashMap<>();
        filtro.put("codigoBarra", CodigoTextField.getText());
        JsysIdProdutos p = (JsysIdProdutos) Retorna.findOneResult("JsysIdProdutos.findByCodigoBarra", filtro);
        if (p != null) {
            filtro.clear();
            filtro.put("idProduto", p.getIdProduto().getIdProduto());
            filtro.put("idloja", tranfereciaAtual.getIdloja());
            setProdutoAtual((JsysProdutosTPrecos) Retorna.findOneResult("JsysProdutosTPrecos.findByIdProdutoAndIdloja", filtro));
        }
    }//GEN-LAST:event_CodigoTextFieldKeyReleased

    private void CodigoTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CodigoTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            quantidadeTextField.requestFocus();
        }
    }//GEN-LAST:event_CodigoTextFieldKeyPressed

    private void quantidadeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantidadeTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (produtoAtual != null & !"".equals(quantidadeTextField.getText())) {
                addIten a = new addIten(this);
                //a.addPropertyChangeListener(this);
                a.execute();
            } else {
                JOptionPane.showMessageDialog(null, "Codigo do Produto Não Encontrado!"
                        + System.lineSeparator()
                        + "Quantidade Invalida!");
            }
        }
    }//GEN-LAST:event_quantidadeTextFieldKeyPressed

    private void quantidadeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantidadeTextFieldFocusGained
        quantidadeTextField.selectAll();
    }//GEN-LAST:event_quantidadeTextFieldFocusGained

    private void CodigoTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CodigoTextFieldFocusGained
        CodigoTextField.selectAll();
    }//GEN-LAST:event_CodigoTextFieldFocusGained

    private void FechaTranferenciajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FechaTranferenciajButtonActionPerformed
        fechar();
    }//GEN-LAST:event_FechaTranferenciajButtonActionPerformed

    private void botaoImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoImprimirActionPerformed
        Map<Object, Object> parametros = new HashMap<>();
        parametros.put("idTransf", tranfereciaAtual.getIdTransf());
        ReportUtils.openReport("Lista Tranferencia Produtos ", "/br/rel/deposito/listaTranferencia.jasper", parametros);
    }//GEN-LAST:event_botaoImprimirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int index = masterTable.getSelectedRow();
        if (tranfereciaAtual.getCancelado()) {
            JOptionPane.showMessageDialog(null, "Tranferencia Está Cancelada", "ERRO", JOptionPane.ERROR_MESSAGE);
        } else {
            if (tranfereciaAtual.getConfirmado()) {
                masterTable.setValueAt(false, index, 5);
                tranfereciaAtual.setConfirmado(false);
                ConnectionFactory.update(tranfereciaAtual);
                masterTable.clearSelection();
                masterTable.setRowSelectionInterval(index, index);
                baixarEstoque();
                JOptionPane.showMessageDialog(null, "Tranferencia Reaberta com Sucesso", "MENSAGEM", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Tranferencia Não está Fechada", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void filtroTodosCKBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtroTodosCKBItemStateChanged
        if (filtroTodosCKB.isSelected()) {
            filtroClienteCB.setEnabled(false);
            filtroClienteCB.setSelectedIndex(0);
        } else {
            filtroClienteCB.setEnabled(true);
        }
    }//GEN-LAST:event_filtroTodosCKBItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        list.clear();
        Map<Object, Object> filtro = new HashMap<>();
        filtro.put("dataInicial", dataInicial.getDate());
        filtro.put("datafinal", dataFinal.getDate());
        filtro.put("confirmado", !filtroEmAbertoCKB.isSelected());
        if (filtroTodosCKB.isSelected()) {
            for (Object O : Retorna.findList("TransferenciasProdutos.findByConfirmado", filtro)) {
                TransferenciasProdutos t = (TransferenciasProdutos) O;
                list.add(t);
            }
        } else {
            filtro.put("idCliente", ((JsysClientes) filtroClienteCB.getSelectedObject()).getIdCliente());
            for (Object O : Retorna.findList("TransferenciasProdutos.findByIdCliente", filtro)) {
                TransferenciasProdutos t = (TransferenciasProdutos) O;
                list.add(t);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        fechar();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void uJComboBoxClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_uJComboBoxClientesItemStateChanged
        if (uJComboBoxClientes.getSelectedIndex() != -1) {
            if (uJComboBoxClientes.getSelectedObject() instanceof JsysClientes) {
                JsysClientes C = ((JsysClientes) uJComboBoxClientes.getSelectedObject());
                tranfereciaAtual.setIdCliente(C);
                tranfereciaAtual.setIdloja(C.getIdLoja());
                try {
                    ConnectionFactory.salvar();
                } catch (RollbackException e) {
                    Log.registraErro(this.getClass().getName(), "salvar", e);
                    List<TransferenciasProdutos> merged = new ArrayList<>(list.size());
                    for (TransferenciasProdutos T : list) {
                        merged.add(ConnectionFactory.getEntityManagerNew().merge(T));
                    }
                    list.clear();
                    list.addAll(merged);
                }
            }
        }
    }//GEN-LAST:event_uJComboBoxClientesItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CodigoTextField;
    private javax.swing.JButton FechaTranferenciajButton;
    private javax.swing.JTextField JLdescrisaoProduto;
    private javax.swing.JTextField UsuariojTextField;
    private javax.swing.JButton botaoImprimir;
    private javax.swing.JLabel codigojLabel;
    private com.toedter.calendar.JDateChooser dataFinal;
    private com.toedter.calendar.JDateChooser dataInicial;
    private javax.swing.JTextField datajTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteDetailButton;
    private javax.swing.JScrollPane detailScrollPane;
    private javax.swing.JTable detailTable;
    private componentes.UJComboBox filtroClienteCB;
    private javax.swing.JCheckBox filtroEmAbertoCKB;
    private javax.swing.JCheckBox filtroTodosCKB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBarProduto;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.util.List<TransferenciasProdutos> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField quantidadeTextField;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private componentes.UJComboBox uJComboBoxClientes;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void baixarEstoque() {
        final Progress p = new Progress();
        SwingWorker worker = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                return DADOS.execProcudureRetInt("BaixaTranferencia(" + tranfereciaAtual.getIdTransf().toString() + ")");
            }

            @Override
            protected void done() {
                super.done();
                try {
                    if (Integer.parseInt(get().toString()) == 1) {
                        JOptionPane.showMessageDialog(null, "Erro ao Baixar Estoque"
                                + System.lineSeparator()
                                + "O Estoque sera Recontado", "ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    Log.registraErro(this.getClass().getName(), "baixarEstoque", e, "Erro ao Baixar Estoque \nO Estoque sera Recontado");
                } finally {
                    DADOS.execProcudureRetInt("recontaEstoque");
                }
                p.dispose();
            }
        };
        worker.execute();
        p.setVisible(true);
    }

    public void setProdutoAtual(JsysProdutosTPrecos produtoAtual) {
        this.produtoAtual = produtoAtual;
        if (this.produtoAtual != null) {
            JLdescrisaoProduto.setText(this.produtoAtual.getJsysProdutosT().getNomeProduto());
        } else {
            JLdescrisaoProduto.setText("<- Digite o codigo do Produto!!");
        }
    }

    private void fechar() {
        int index = masterTable.getSelectedRow();
        if (!masterTable.getValueAt(masterTable.getSelectedRow(), 2).toString().equals("1")
                & !masterTable.getValueAt(masterTable.getSelectedRow(), 3).equals("")) {
            tranfereciaAtual.setIdloja(((JsysClientes) uJComboBoxClientes.getSelectedObject()).getIdLoja());
            tranfereciaAtual.setConfirmado(true);
            ConnectionFactory.update(tranfereciaAtual);
            masterTable.clearSelection();
            masterTable.setRowSelectionInterval(index, index);
            baixarEstoque();
            JOptionPane.showMessageDialog(null, "Tranferencia Fechada com Sucesso", "MENSAGEM", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            jProgressBarProduto.setValue((Integer) evt.getNewValue());
        }
    }

    private class addIten extends SwingWorker<Void, Void> {

        private addIten(TransferenciaDeposito aThis) {
            bloqueioTela(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            addPropertyChangeListener(aThis);
        }

        @Override
        @SuppressWarnings("unchecked")
        protected Void doInBackground() throws Exception {
            setProgress(0);
            int index = masterTable.getSelectedRow();
            Integer idProduto = produtoAtual.getJsysProdutosT().getIdProduto();
            masterTable.setValueAt(((JsysClientes) uJComboBoxClientes.getSelectedObject()).getIdLoja(), masterTable.getSelectedRow(), 3);
            Collection<TransferenciasProdutosItens> ts = tranfereciaAtual.getTransferenciasProdutosItensCollection();
            setProgress(50);
            boolean update = false;
            if (ts == null) {
                ts = new LinkedList<>();
                tranfereciaAtual.setTransferenciasProdutosItensCollection((List) ts);
            } else {
                for (TransferenciasProdutosItens t : ts) {
                    if (t.getTransferenciasProdutosItensPK().getIdProduto() == idProduto) {
                        update = true;
                        t.setJsysProdutosT(produtoAtual.getJsysProdutosT());
                        t.setQuantidade(ManagerDecimal.StringToBigDecimal(quantidadeTextField.getText()));
                        t.setPrecoCompra(produtoAtual.getJsysProdutosT().getPrecoCompra());
                        t.setPrecoVenda(produtoAtual.getPrecoVenda());
                        ConnectionFactory.update(t);
                        break;
                    }
                }
            }
            if (!update) {
                TransferenciasProdutosItens t = new TransferenciasProdutosItens();
                t.setTransferenciasProdutos(tranfereciaAtual);
                ts.add(t);
                t.setJsysProdutosT(produtoAtual.getJsysProdutosT());
                t.setTransferenciasProdutosItensPK(new TransferenciasProdutosItensPK(tranfereciaAtual.getIdTransf(), idProduto));
                t.setQuantidade(ManagerDecimal.StringToBigDecimal(quantidadeTextField.getText()));
                t.setPrecoCompra(produtoAtual.getJsysProdutosT().getPrecoCompra());
                t.setPrecoVenda(produtoAtual.getPrecoVenda());
                ConnectionFactory.insert(t);
            }
            setProgress(75);
            masterTable.clearSelection();
            masterTable.setRowSelectionInterval(index, index);
            int row = ts.size() - 1;
            detailTable.setRowSelectionInterval(row, row);
            detailTable.scrollRectToVisible(detailTable.getCellRect(row, 0, true));
            setProgress(100);
            return null;
        }

        @Override
        protected void done() {
            super.done();
            bloqueioTela(true);
            setCursor(null);
            CodigoTextField.setText("");
            JLdescrisaoProduto.setText("<- Digite o codigo do Produto!!");
            quantidadeTextField.setText("1");
            CodigoTextField.requestFocus();
            jProgressBarProduto.setValue(0);
        }

        private void bloqueioTela(boolean b) {
            uJComboBoxClientes.setEnabled(b);
            CodigoTextField.setEnabled(b);
            quantidadeTextField.setEnabled(b);
            detailTable.setEnabled(b);
            jProgressBarProduto.setVisible(!b);
        }
    }

}
