package br.sql.janelas.liberacoes;

import br.sql.acesso.SQLDatabaseConnection;
import br.sql.bean.Usuarios;
import br.sql.log.Log;
import br.sql.plainDocument.UppercaseDocument;
import br.sql.util.Progress;
import br.sql.util.Validar;
import java.awt.HeadlessException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import jsys.sql.Menu;

/**
 *
 * @author Administrador
 */
public final class LiberacaoGeralJanelaJDialog extends javax.swing.JDialog {

    /**
     * Creates new form LiberacaoGeralJanelaJDialog
     */
    private int tipo;
    private static final SQLDatabaseConnection DADOS = new SQLDatabaseConnection();

    /**
     *
     * @param parent new javax.swing.JFrame();
     * @param modal true
     */
    public LiberacaoGeralJanelaJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titulojLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        motivojTextArea = new javax.swing.JTextArea();
        usuariojTextField = new javax.swing.JTextField();
        senhajPasswordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        titulojLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titulojLabel.setText("Liberação");
        titulojLabel.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulojLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titulojLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Confirmar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        motivojTextArea.setColumns(20);
        motivojTextArea.setRows(5);
        jScrollPane1.setViewportView(motivojTextArea);

        usuariojTextField.setDocument(new UppercaseDocument());
        usuariojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usuariojTextFieldKeyPressed(evt);
            }
        });

        senhajPasswordField.setDocument(new UppercaseDocument());
        senhajPasswordField.setName(""); // NOI18N
        senhajPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                senhajPasswordFieldKeyPressed(evt);
            }
        });

        jLabel2.setText("Usuario");
        jLabel2.setToolTipText("");

        jLabel3.setText("Senha");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(usuariojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(senhajPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usuariojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(senhajPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setConfirma(false);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final Progress p = new Progress();
        SwingWorker worker = new SwingWorker() {
            @Override
            protected Void doInBackground() throws Exception {
                Confirma();
                return null;
            }

            @Override
            protected void done() {
                super.done();
                if (!isConfirma()) {
                    JOptionPane.showMessageDialog(null, "Usuário Sem Permição ou Senha Incoreta\n"
                            + "Prencher Motivo da Liberação");
                }
                p.dispose();
            }
        };
        worker.execute();
        p.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void usuariojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuariojTextFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            senhajPasswordField.requestFocus();
        }
    }//GEN-LAST:event_usuariojTextFieldKeyPressed

    private void senhajPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_senhajPasswordFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            jButton2.doClick();
        }
    }//GEN-LAST:event_senhajPasswordFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            LiberacaoGeralJanelaJDialog dialog = new LiberacaoGeralJanelaJDialog(new javax.swing.JFrame(), true);
            dialog.setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea motivojTextArea;
    private javax.swing.JPasswordField senhajPasswordField;
    private javax.swing.JLabel titulojLabel;
    private javax.swing.JTextField usuariojTextField;
    // End of variables declaration//GEN-END:variables

    public String getMensagem() {
        return motivojTextArea.getText();
    }

    public void setMensagem(String Mensagem) {
        motivojTextArea.setText(Mensagem);
    }

    private boolean Confirma = false;

    public boolean isConfirma() {
        return Confirma;
    }

    public void setConfirma(boolean Confirma) {
        this.Confirma = Confirma;
    }

    private Integer id;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    private String idSeq;

    public String getIdSeq() {
        return idSeq;
    }

    public void setIdSeq(String idSeq) {
        this.idSeq = idSeq;
    }

    /**
     *
     * @param valor 0 = "Liberação Desconto" 1 = "Reabertura" 2 = "Ajuste
     * Desconto" 3 = "Cancelamento de Venda" 4 = "Reimpressao Cupom" 5 =
     * "Cancelar Recebimento"
     */
    public void setTipo(int valor) {
        this.tipo = valor;
        String titulo = new String();
        switch (this.tipo) {
            case 0:
                titulo = "Liberação Desconto";
                break;
            case 1:
                titulo = "Reabertura";
                break;
            case 2:
                titulo = "Ajuste Desconto";
                break;
            case 3:
                titulo = "Cancelamento de Venda";
                break;
            case 4:
                titulo = "Reimpressão";
                break;
            case 5:
                titulo = "Cancelar Recebimento";
                break;
            default:
                JOptionPane.showMessageDialog(this, "ERRO");
                this.dispose();
                break;
        }
        titulojLabel.setText(titulo);
    }

    private void Confirma() throws HeadlessException, NoSuchAlgorithmException, UnsupportedEncodingException {
        Usuarios user = Validar.Senha(usuariojTextField.getText().trim(), senhajPasswordField.getPassword());
        if (user != null & !getMensagem().equals("")) {
            switch (tipo) {
                case 0:
                    if (user.getIdGrupo().isVendas()) {
                        DADOS.execProcedure(new StringBuilder().append("RegistraLiberacao('Vendas', '")
                                .append(id.toString()).append("', '")
                                .append(getMensagem()).append("', '")
                                .append(usuariojTextField.getText())
                                .append("', 'Liberacao', '")
                                .append(usuariojTextField.getText()).append("')").toString());
                        setConfirma(true);
                    }
                    dispose();
                    break;
                case 1:
                    if (user.getIdGrupo().isVendas()) {
                        try {
                            int F = DADOS.execProcudureRetInt(new StringBuilder().append("ReabrirVenda(")
                                    .append(id.toString()).append(", '")
                                    .append(usuariojTextField.getText()).append("', '")
                                    .append(getMensagem()).append("')").toString());
                            if (F == 1) {
                                setConfirma(true);
                            } else {
                                setConfirma(false);
                            }
                        } catch (Exception e) {
                            Log.registraErro(this, "Confirma", e);
                        }
                    }
                    dispose();
                    break;
                case 2:
                    if (user.getIdGrupo().isVendas()) {
                        setConfirma(true);
                    }
                    break;
                case 3:
                    if (user.getIdGrupo().isVendas()) {
                        try {
                            int c = DADOS.execProcudureRetInt(new StringBuilder().append("CancelarVenda(")
                                    .append(id.toString()).append(", '")
                                    .append(usuariojTextField.getText()).append("', '")
                                    .append(getMensagem()).append("')").toString());
                            if (c == 0) {
                                setConfirma(true);
                            } else {
                                setConfirma(false);
                            }
                        } catch (Exception e) {
                            Log.registraErro(this, "Confirma", e);
                        }
                    }
                    dispose();
                    break;
                case 4:
                    if (user.getIdGrupo().isGerencia()) {
                        DADOS.execProcedure(new StringBuilder().append("RegistraLiberacao('cupons', '")
                                .append(id.toString()).append("', '")
                                .append(getMensagem()).append("', '")
                                .append(usuariojTextField.getText())
                                .append("', 'Reimpressão', '")
                                .append(Menu.getNomeUsuario()).append("')").toString());
                        setConfirma(true);
                    }
                    dispose();
                    break;
                case 5:
                    if (user.getIdGrupo().isGerencia() || user.getIdGrupo().isAdministracao()) {
                        try {
                            int c = DADOS.execProcudureRetInt(new StringBuilder().append("CancelarRecebimento(")
                                    .append(id.toString()).append(", ")
                                    .append(idSeq).append(", '")
                                    .append(usuariojTextField.getText()).append("', '")
                                    .append(getMensagem()).append("')").toString());
                            if (c == 0) {
                                setConfirma(true);
                            } else {
                                setConfirma(false);
                            }
                        } catch (Exception e) {
                            Log.registraErro(this, "Confirma", e);
                        }
                    }
                    dispose();
                    break;
            }
        } else {
            setConfirma(false);
        }
    }
}
