package br.sql.janelas.utilitarios;

//import br.inf.portalfiscal.nfe.schema_4.procNFe.TNfeProc;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TNfeProc;
import br.sql.acesso.SQLDatabaseConnection;
import br.sql.bean.JsysNFe;
import br.sql.bean.JsysNFeEvento;
import br.sql.nfe.xml.GerandoProcEventoNFe;
import br.sql.log.Log;
import br.sql.util.FileEx;
import br.sql.util.ManagerData;
import br.sql.util.ManagerString;
import java.awt.Cursor;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Juliano Alves Medina
 */
public class ImportadorXML extends javax.swing.JDialog {

    private static final SQLDatabaseConnection DADOS = new SQLDatabaseConnection();

    public ImportadorXML(java.awt.Frame f, boolean m) {
        super(f, m);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Importador XML");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Importador XML");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLog);

        jButton1.setText("Importar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Log");
        jLabel2.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            if (file.isDirectory()) {
                task = new Task(file);
                task.execute();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaLog;
    // End of variables declaration//GEN-END:variables

    private void setLog(FileNotFoundException e) {
        escreveLog(e.getLocalizedMessage());
    }

    private void setLog(String e) {
        escreveLog(e);
    }

    private void escreveLog(String valor) {
        this.jTextAreaLog.append(System.lineSeparator() + valor);
    }

    private Task task;

    private class Task extends SwingWorker<Void, String> {

        private final File diretorio;

        public Task(File file) {
            diretorio = file;
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        }

        @Override
        protected Void doInBackground() throws Exception {
            setLog("Aguarde o Termino do Processo");
            setLog("------------------------------");
            if (diretorio.list().length == 0) {
                setLog("Não existem arquivos na Pasta " + diretorio.toString());
            }
            for (String file : diretorio.list()) {
                try {
                    FileEx fileXml = new FileEx(
                            new StringBuilder().append(diretorio).append("/").append(file).toString());
                    if (FileEx.getExtension(fileXml).equals(FileEx.xml)) {
                        String xml = fileXml.stringRead();
                        xml = ManagerString.prepareXmlToSqlServer(xml);
                        if (xml.length() > 0) {
                            switch (getTipoXML(xml)) {
                                case "nfeProc":
                                    importNfeProc(xml);
                                    break;
                                case "procEventoNFe":
                                    importProcEventoNFe(xml);
                                    break;
                                default:
                                    setLog("O arquivo [" + file + "] não é um XML Valido");
                                    break;
                            }
                        }
                    }
                } catch (FileNotFoundException e) {
                    Log.registraErro(this.getClass().getName(), "doInBackground", e);
                    setLog("------------------------------");
                    setLog(" !!! erro ao tentar importar " + file);
                    setLog(e);
                    setLog("------------------------------");
                }
            }
            List<String> scripts = new ArrayList<>();
            scripts.add("UPDATE jsysNFe SET jsysNFe.cancelada = 1 FROM jsysNFe INNER JOIN jsysNFeEvento ON jsysNFe.chaveAcesso = CONCAT ('NFe', jsysNFeEvento.chNFe) WHERE (jsysNFeEvento.emitida = 1) AND (jsysNFe.cancelada <> 1)");
            scripts.add("UPDATE jsysNFe SET venda = NFe.Venda FROM jsysNFe INNER JOIN NFe ON nfe.nNFe = jsysNFe.nNF AND cast(nfe.serie AS INT) = jsysNFe.serie AND '55' = jsysNFe.mod AND '1' = jsysNFe.tpAmb");
            scripts.add("WITH XMLNAMESPACES ( DEFAULT 'http://www.portalfiscal.inf.br/nfe') "
                    + "UPDATE jsysNFe SET dhEmi = CAST(ISNULL(SUBSTRING(REPLACE(procNFe.value('(/nfeProc/NFe/infNFe/ide/dhEmi)[1]', 'varchar(max)'), 'T', ' '), 0, 20) "
                    + "	,procNFe.value('(/nfeProc/NFe/infNFe/ide/dEmi)[1]', 'varchar(max)')) AS datetime) "
                    + "	,dhSaiEnt = CAST(ISNULL(SUBSTRING(REPLACE(procNFe.value('(/nfeProc/NFe/infNFe/ide/dhEmi)[1]', 'varchar(max)'), 'T', ' '), 0, 20) "
                    + "	,procNFe.value('(/nfeProc/NFe/infNFe/ide/dEmi)[1]', 'varchar(max)')) AS datetime) "
                    + "WHERE procNFe IS NOT NULL");
            scripts.add("WITH XMLNAMESPACES ( DEFAULT 'http://www.portalfiscal.inf.br/nfe') "
                    + "UPDATE jsysNFe SET enviNFe = concat('<enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\" versao=\"3.10\"><idLote>1</idLote><indSinc>1</indSinc>' "
                    + "		,cast(procNFe.query('nfeProc/NFe') as varchar(max)) "
                    + "		,'</enviNFe>') "
                    + "WHERE (procNFe is not null) and (emitida = 1) and (enviNFe is null)");
            scripts.add("WITH XMLNAMESPACES ( DEFAULT 'http://www.portalfiscal.inf.br/nfe') "
                    + "UPDATE jsysNFe "
                    + "set retConsReciNFe = concat('<retEnviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\" versao=\"2.00\">' "
                    + "			,REPLACE(REPLACE(CAST(procNFe.query('nfeProc/protNFe/infProt/tpAmb') as varchar(max)), 'p1:', ''), ' xmlns:p1=\"http://www.portalfiscal.inf.br/nfe\"', '') "
                    + "			,REPLACE(REPLACE(CAST(procNFe.query('nfeProc/protNFe/infProt/verAplic') as varchar(max)), 'p1:', ''), ' xmlns:p1=\"http://www.portalfiscal.inf.br/nfe\"', '') "
                    + "			,'<cStat>104</cStat><xMotivo>Lote processado</xMotivo>' "
                    + "			,REPLACE(REPLACE(CAST(procNFe.query('nfeProc/NFe/infNFe/ide/cUF') as varchar(max)),'p1:', ''), ' xmlns:p1=\"http://www.portalfiscal.inf.br/nfe\"', '') "
                    + "			,REPLACE(REPLACE(CAST(procNFe.query('nfeProc/protNFe/infProt/dhRecbto') as varchar(max)),'p1:', ''), ' xmlns:p1=\"http://www.portalfiscal.inf.br/nfe\"', '') "
                    + "			,REPLACE(REPLACE(CAST(procNFe.query('nfeProc/protNFe') as varchar(max)), ' xmlns:p1=\"http://www.portalfiscal.inf.br/nfe\"', ''), 'p1:', '') "
                    + "			,'</retEnviNFe>') "
                    + "WHERE (procNFe is not null) and (emitida = 1) and (retConsReciNFe is null)");
            for (String script : scripts) {
                if (DADOS.execSQLUpdate(script) == 0) {
                    Exception e = new Exception("Erro ao Atulizar a tabela jsysNFe; Script: " + script);
                    Log.registraErro(this.getClass().getName(), "doInBackground", e);
                    setLog("------------------------------");
                    setLog(e.getMessage());
                    setLog("------------------------------");
                }
            }
            return null;
        }

        @Override
        protected void done() {
            super.done();
            setLog("------------------------------");
            setLog("Processo Finalizado");
            setCursor(null);
        }

        private String getTipoXML(String xml) {
            return xml.substring(xml.indexOf("<") + 1, xml.indexOf(" ")).trim();
        }

        private void importNfeProc(String xml) {
            try {
                //TNfeProc nfeProc = GerandoNFeProc.gerar(xml);
                TNfeProc nfeProc = br.com.swconsultoria.nfe.util.XmlNfeUtil.xmlToObject(xml, TNfeProc.class);
                //TNfeProc nfeProc = XmlUtil.xmlToObject();
                JsysNFe jsysNfe = new JsysNFe();
                jsysNfe.setProcNFe(xml);
                jsysNfe.setVenda(0);
                jsysNfe.setChaveAcesso(nfeProc.getNFe().getInfNFe().getId());
                jsysNfe.setIndSinc(false);
                jsysNfe.setCUF(nfeProc.getNFe().getInfNFe().getIde().getCUF());
                jsysNfe.setCNF(nfeProc.getNFe().getInfNFe().getIde().getCNF());
                jsysNfe.setNatOp(nfeProc.getNFe().getInfNFe().getIde().getNatOp());
                jsysNfe.setIndPag("1");
                jsysNfe.setSerie(nfeProc.getNFe().getInfNFe().getIde().getSerie());
                jsysNfe.setNNF(nfeProc.getNFe().getInfNFe().getIde().getNNF());
                jsysNfe.setDhEmi(ManagerData.getDate());
                jsysNfe.setDhSaiEnt(ManagerData.getDate());
                jsysNfe.setTpNF(true);
                jsysNfe.setIdDest("1");
                jsysNfe.setCMunFG(nfeProc.getNFe().getInfNFe().getIde().getCMunFG());
                jsysNfe.setTpImp("1");
                jsysNfe.setTpEmis("1");
                jsysNfe.setCDV(nfeProc.getNFe().getInfNFe().getIde().getCDV());
                jsysNfe.setTpAmb(nfeProc.getNFe().getInfNFe().getIde().getTpAmb());
                jsysNfe.setFinNFe(nfeProc.getNFe().getInfNFe().getIde().getFinNFe());
                jsysNfe.setIndFinal("1");
                jsysNfe.setIndPres("1");
                jsysNfe.setMod(Integer.parseInt(nfeProc.getNFe().getInfNFe().getIde().getMod()));
                jsysNfe.setEmitida(true);
                jsysNfe.setCancelada(false);
                if (br.sql.acesso.ConnectionFactory.insert(jsysNfe) instanceof JsysNFe) {
                    setLog("Importado " + nfeProc.getNFe().getInfNFe().getId());
                } else {
                    setLog("Erro " + nfeProc.getNFe().getInfNFe().getId());
                }
            } catch (JAXBException ex) {
                Log.registraErro(ImportadorXML.class, "importNfeProc", ex);
            }
        }

        private void importProcEventoNFe(String xml) {
            //br.inf.portalfiscal.nfe.schema.procEventoCancNFe.TProcEvento procEventoNFe = GerandoProcEventoNFe.gerar(xml);
            br.com.swconsultoria.nfe.schema.eventoCancNFe.TProcEvento procEventoNFe = GerandoProcEventoNFe.gerar(xml);
            JsysNFeEvento evento = new JsysNFeEvento();
            evento.setIdEvento(procEventoNFe.getEvento().getInfEvento().getId());
            evento.setCOrgao(procEventoNFe.getEvento().getInfEvento().getCOrgao());
            evento.setTpAmb(procEventoNFe.getEvento().getInfEvento().getTpAmb());
            evento.setChNFe(procEventoNFe.getEvento().getInfEvento().getChNFe());
            evento.setDhEvento(ManagerData.formataData(procEventoNFe.getEvento().getInfEvento().getDhEvento(), ManagerData.FORMATO_NFE));
            evento.setTpEvento(procEventoNFe.getEvento().getInfEvento().getTpEvento());
            evento.setNSeqEvento(Integer.parseInt(procEventoNFe.getEvento().getInfEvento().getNSeqEvento()));
            evento.setDescEvento(procEventoNFe.getEvento().getInfEvento().getDetEvento().getDescEvento() + "");
            evento.setNProt(procEventoNFe.getEvento().getInfEvento().getDetEvento().getNProt() + "");
            evento.setXJust(procEventoNFe.getEvento().getInfEvento().getDetEvento().getXJust() + "");
            evento.setEmitida("135".equals(procEventoNFe.getRetEvento().getInfEvento().getCStat()));
            evento.setProcEventoNFe(xml);
            if (br.sql.acesso.ConnectionFactory.insert(evento) instanceof JsysNFeEvento) {
                setLog("Importado " + procEventoNFe.getEvento().getInfEvento().getId());
            } else {
                setLog("Erro " + procEventoNFe.getEvento().getInfEvento().getId());
            }
        }
    }
}
