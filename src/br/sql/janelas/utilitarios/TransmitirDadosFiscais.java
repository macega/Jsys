package br.sql.janelas.utilitarios;

import br.sql.bean.JsysNFe;
import br.sql.bean.JsysNFeEvento;
import br.sql.bean.JsysParametros;
import br.sql.nfe.xml.GerandoProcEventoNFe;
import br.sql.log.Log;
import br.sql.nfe.util.XmlUtil;
import br.sql.util.GravaNoArquivo;
import br.sql.util.Mail;
import br.sql.util.ManagerData;
import br.sql.util.ReportUtils;
import br.sql.util.Retorna;
import br.sql.util.Validar;
import br.sql.util.Zipper;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Juliano Alves Medina
 */
public class TransmitirDadosFiscais extends javax.swing.JDialog implements PropertyChangeListener {

    private final JsysParametros par = Retorna.JsysParametros();
    //private static final SQLDatabaseConnection DADOS = new SQLDatabaseConnection();

    /**
     * Creates new form TransmitirDadosFiscais
     *
     */
    public TransmitirDadosFiscais() {
        super(new javax.swing.JFrame(), true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        dataInicialDC = new com.toedter.calendar.JDateChooser();
        dataFinalDC = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Envio de Arquivos Fiscais");

        startButton.setText("Enviar");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Envio de Arquivos Fiscais");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dataInicialDC.setDate(ManagerData.getPrimeiroDiaDoMes(-1));

        dataFinalDC.setDate(ManagerData.getUltimoDiaDoMes(-1));

        jLabel2.setText("Data Inicial");

        jLabel3.setText("Data Final");

        taskOutput.setEditable(false);
        taskOutput.setColumns(20);
        taskOutput.setRows(5);
        jScrollPane1.setViewportView(taskOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataInicialDC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(dataFinalDC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataInicialDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataFinalDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startButton.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();
    }//GEN-LAST:event_startButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dataFinalDC;
    private com.toedter.calendar.JDateChooser dataInicialDC;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startButton;
    private javax.swing.JTextArea taskOutput;
    // End of variables declaration//GEN-END:variables

    private Task task;

    private class Task extends SwingWorker<Boolean, String> {

        @Override
        public Boolean doInBackground() {
            setProgress(0);
            publish("Processo iniciado.");
            GravaNoArquivo gravador = new GravaNoArquivo();
            try {
                StringBuilder html = new StringBuilder();
                html.append("<html><head><title>ARQUIVOS XML</title></head><body>");
                html.append("<div>Segue em anexo o arquivo no formato ZIP do período de ")
                        .append(ManagerData.convertBrDate(dataInicialDC.getDate()))
                        .append(" a ")
                        .append(ManagerData.convertBrDate(dataFinalDC.getDate()))
                        .append(".</div>");
                html.append("<br><br><br><div>___________________________________________</div>");
                html.append("<div><H2><b><u>")
                        .append(par.getFantasia())
                        .append("</u></b></H2></div>");
                html.append("<div><H3><b>")
                        .append("<div>").append(par.getRazaoSocial()).append("</div>")
                        .append(par.getCnpj())
                        .append("</b></H3></div>");
                html.append("<div>Endereco: ")
                        .append(par.getEndereco())
                        .append("</div>");
                html.append("<div>Fone: ")
                        .append(par.getFone())
                        .append("</div></body></html>");
                setProgress(5);
                publish("HTML Gerado com Sucesso.");
                publish("Montando XMLs.");

                StringBuilder pasta = new StringBuilder();
                pasta.append(br.JavaApplicationJsys.PASTA_RELATORIOS_FISCAIS);
                StringBuilder subPasta;
                List<File> files = new ArrayList<>();
                String[] mod = new String[]{"55", "65", "canceladas"};
                Map<Object, Object> filtro = new HashMap<>();
                for (String m : mod) {
                    subPasta = new StringBuilder();
                    subPasta.append(pasta);
                    subPasta.append(m);
                    subPasta.append("_");
                    subPasta.append(ManagerData.convertDate(dataInicialDC.getDate(), "YYYYMM"));
                    if (!"canceladas".equals(m)) {
                        filtro.clear();
                        filtro.put("dhEmiInicial", ManagerData.setHoraInicioDia(dataInicialDC.getDate()));
                        filtro.put("dhEmiFinal", ManagerData.setHoraFimDia(dataFinalDC.getDate()));
                        filtro.put("emitida", true);
                        filtro.put("mod", Integer.parseInt(m));
                        List<Object> O = Retorna.findList("JsysNFe.findXml", filtro);
                        for (Object o : O) {
                            JsysNFe nfe = (JsysNFe) o;
                            if (Validar.isNotNullOrWhite(nfe.getEnviNFe(), nfe.getRetConsReciNFe())) {
                                gravador.salvarArquivo(XmlUtil.criaNfeProc(nfe.getEnviNFe(), nfe.getRetConsReciNFe()), // GerandoNFeProc.gerarString(nfe.getEnviNFe(), nfe.getRetConsReciNFe())
                                        subPasta.toString() + File.separator + "serie_" + nfe.getSerie(),
                                        nfe.getChaveAcesso(),
                                        "xml");
                                if ("55".equals(m)) {
                                    gravador.salvarArquivo(
                                            br.sql.nfe.danfe.ImprimirDanfe.nfePdf(nfe.getChaveAcesso()),
                                            subPasta.toString() + File.separator + "serie_" + nfe.getSerie(),
                                            nfe.getChaveAcesso(),
                                            "pdf");
                                }
                            }
                        }
                    } else {
                        filtro.clear();
                        filtro.put("dhEventoInicial", dataInicialDC.getDate());
                        filtro.put("dhEventoFinal", dataFinalDC.getDate());
                        filtro.put("emitida", true);
                        List<Object> O = Retorna.findList("JsysNFeEvento.findByDhEvento", filtro);
                        for (Object o : O) {
                            JsysNFeEvento evento = (JsysNFeEvento) o;
                            if (Validar.isNotNullOrWhite(evento.getEnvEventoCancNFe(), evento.getRetEnvEventoCancNFe())) {
                                gravador.salvarArquivo(GerandoProcEventoNFe.getProcEventoNFe(evento.getEnvEventoCancNFe(), evento.getRetEnvEventoCancNFe()),
                                        subPasta.toString(),
                                        evento.getIdEvento(),
                                        "xml");
                            }
                        }
                    }
                    File file = new File(subPasta.toString());
                    if (file.exists()) {
                        files.add(file);
                    }
                }
                setProgress(15);
                publish("XMLs Gerado com Sucesso.");
                publish("Montando Relatorio Fiscal.");
                InputStream inputStream = getClass().getResourceAsStream("/br/rel/fiscal/relatorioNotasFiscais.jasper");
                Map<Object, Object> parametros = new HashMap<>();
                parametros.put("dataInicial", br.sql.util.ManagerData.setHoraInicioDia(dataInicialDC.getDate()));
                parametros.put("dataFinal", br.sql.util.ManagerData.setHoraFimDia(dataFinalDC.getDate()));
                try {
                    files.add(gravador.salvarArquivo(ReportUtils.getPdfReport(inputStream, parametros, br.sql.acesso.ConnectionFactory.getSakilaConnection()),
                            br.JavaApplicationJsys.PASTA_RELATORIOS_FISCAIS,
                            ManagerData.convertDate(dataInicialDC.getDate(), "yyyyMM"),
                            "pdf"));
                } catch (SQLException e) {
                    Log.registraErro(this.getClass().getName(), "jButton2ActionPerformed", e);
                }
                setProgress(50);
                publish("Compactando Arquivos.");
                Zipper zip = new Zipper();
                try {
                    zip.criarZip(gravador.salvarArquivo("", br.JavaApplicationJsys.PASTA_FISCAIS_COMPACTADOS, ManagerData.convertDate(dataInicialDC.getDate(), "yyyy-MM"), "zip"), files, 9);
                } catch (IOException e) {
                    publish("Erro ao Criar arquivo Zip.");
                    publish("E-Mail Não Enviado.");
                    setProgress(100);
                    Log.registraErro(this.getClass().getName(), "Task.doInBackground", e);
                    return false;
                }
                List<String> zips = new ArrayList<>();
                zips.add(zip.getArquivoZipAtual().toString());
                setProgress(75);
                publish("Enviando para o destinatario de Correio.");
                Mail correio = new Mail();
                correio.setDestinatario(br.JavaApplicationJsys.INI.getString("EMAIL", "NOME_DESTINO_CONTADOR"), br.JavaApplicationJsys.INI.getString("EMAIL", "DESTINO_CONTADOR"));
                correio.senderMail("Documentos Fiscais - " + par.getFantasia(), html.toString(), zips);
                zip.fecharZip();
                setProgress(100);
                publish("E-mail Enviado.");
                return true;
            } catch (JAXBException | UnsupportedEncodingException | MessagingException ex) {
                setProgress(100);
                publish("Erro não foi possível enviar o E-mail.");
                publish(ex.getMessage());
                Log.registraErro(this.getClass().getName(), "Task.doInBackground", ex);
                return false;
            }
        }

        @Override
        protected void process(List<String> chunks) {
            super.process(chunks); //To change body of generated methods, choose Tools | Templates.
            chunks.stream().forEach((s) -> {
                taskOutput.append(String.format(s + System.getProperty("line.separator")));
            });
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            try {
                Toolkit.getDefaultToolkit().beep();
                startButton.setEnabled(true);
                setCursor(null);
                if (get()) {
                    JOptionPane.showMessageDialog(TransmitirDadosFiscais.this, "E-mail Enviado.", "Äviso", JOptionPane.INFORMATION_MESSAGE);
                    TransmitirDadosFiscais.this.setVisible(false);
                    TransmitirDadosFiscais.this.dispose();
                }
            } catch (InterruptedException | ExecutionException e) {
                Log.registraErro(this.getClass().getName(), "Task.done", e);
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
        }
    }
}
